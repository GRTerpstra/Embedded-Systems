
Embedded_Systems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000009e8  00000a7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800118  00800118  00000a94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ac4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016a6  00000000  00000000  00000c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf5  00000000  00000000  00002302  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb2  00000000  00000000  00002ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000294  00000000  00000000  00003bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a8  00000000  00000000  00003e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e5  00000000  00000000  000044e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 35       	cpi	r26, 0x53	; 83
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  9e:	0c 94 f2 04 	jmp	0x9e4	; 0x9e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
  b4:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e8 e1       	ldi	r30, 0x18	; 24
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e8 5e       	subi	r30, 0xE8	; 232
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e8 5e       	subi	r30, 0xE8	; 232
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c8 e1       	ldi	r28, 0x18	; 24
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e8 e1       	ldi	r30, 0x18	; 24
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	2b e3       	ldi	r18, 0x3B	; 59
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <upDownAwning>:
int distance_awning_up = 40;						// Distance at which the awning opens
int distance_awning_down = 5;						// Distance at which the awning closes


void upDownAwning()
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
	int sensor_light = atoi(light_sensor);					// Convert light sensor value to int and set ls
 220:	8d e3       	ldi	r24, 0x3D	; 61
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 97 04 	call	0x92e	; 0x92e <atoi>
 228:	ec 01       	movw	r28, r24
	int sensor_temperature = atoi(temperature_sensor);				// Convert temperature sensor value to int and set ts
 22a:	82 e4       	ldi	r24, 0x42	; 66
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 97 04 	call	0x92e	; 0x92e <atoi>
 232:	8c 01       	movw	r16, r24
	distanceStill();								// Get distance
 234:	0e 94 9a 02 	call	0x534	; 0x534 <distanceStill>
	int sensor_distance = atoi(distance_sensor);					// Convert distance sensor value to int
 238:	89 e4       	ldi	r24, 0x49	; 73
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 97 04 	call	0x92e	; 0x92e <atoi>
	
	
	if(sensor_light >= light_awning_down || sensor_temperature >= temperature_awning_down)
 240:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <light_awning_down>
 244:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <light_awning_down+0x1>
 248:	c2 17       	cp	r28, r18
 24a:	d3 07       	cpc	r29, r19
 24c:	3c f4       	brge	.+14     	; 0x25c <upDownAwning+0x44>
 24e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temperature_awning_down>
 252:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temperature_awning_down+0x1>
 256:	02 17       	cp	r16, r18
 258:	13 07       	cpc	r17, r19
 25a:	fc f0       	brlt	.+62     	; 0x29a <upDownAwning+0x82>
	{
		PORTB &= ~(1 << PB5);						// Green LED off
 25c:	2d 98       	cbi	0x05, 5	; 5
		PORTB |= (1 << PB3);						// Red LED on
 25e:	2b 9a       	sbi	0x05, 3	; 5
		
		
		if (sensor_distance > distance_awning_down)						// Makes yellow LED blink
 260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 264:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 268:	28 17       	cp	r18, r24
 26a:	39 07       	cpc	r19, r25
 26c:	0c f0       	brlt	.+2      	; 0x270 <upDownAwning+0x58>
 26e:	40 c0       	rjmp	.+128    	; 0x2f0 <upDownAwning+0xd8>
		{
			PORTB |= (1 << PB4);
 270:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	81 ee       	ldi	r24, 0xE1	; 225
 276:	94 e0       	ldi	r25, 0x04	; 4
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <upDownAwning+0x60>
 280:	00 c0       	rjmp	.+0      	; 0x282 <upDownAwning+0x6a>
 282:	00 00       	nop
			_delay_ms(100);
			PORTB &= ~(1 << PB4);
 284:	2c 98       	cbi	0x05, 4	; 5
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	81 ee       	ldi	r24, 0xE1	; 225
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <upDownAwning+0x74>
 294:	00 c0       	rjmp	.+0      	; 0x296 <upDownAwning+0x7e>
 296:	00 00       	nop
 298:	2b c0       	rjmp	.+86     	; 0x2f0 <upDownAwning+0xd8>
			_delay_ms(100);
		}
	}
	else if(sensor_light <= light_awning_up || sensor_temperature <= temperature_awning_up )			
 29a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <light_awning_up>
 29e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <light_awning_up+0x1>
 2a2:	2c 17       	cp	r18, r28
 2a4:	3d 07       	cpc	r19, r29
 2a6:	3c f4       	brge	.+14     	; 0x2b6 <upDownAwning+0x9e>
 2a8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temperature_awning_up>
 2ac:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temperature_awning_up+0x1>
 2b0:	20 17       	cp	r18, r16
 2b2:	31 07       	cpc	r19, r17
 2b4:	ec f0       	brlt	.+58     	; 0x2f0 <upDownAwning+0xd8>
	{
		PORTB &= ~(1 << PB3);						
 2b6:	2b 98       	cbi	0x05, 3	; 5
		PORTB |= (1 << PB5);						
 2b8:	2d 9a       	sbi	0x05, 5	; 5
		
		
		if (sensor_distance < distance_awning_up)						
 2ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_awning_up>
 2be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_awning_up+0x1>
 2c2:	82 17       	cp	r24, r18
 2c4:	93 07       	cpc	r25, r19
 2c6:	a4 f4       	brge	.+40     	; 0x2f0 <upDownAwning+0xd8>
		{
			PORTB |= (1 << PB4);
 2c8:	2c 9a       	sbi	0x05, 4	; 5
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	81 ee       	ldi	r24, 0xE1	; 225
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <upDownAwning+0xb8>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <upDownAwning+0xc2>
 2da:	00 00       	nop
			_delay_ms(100);
			PORTB &= ~(1 << PB4);
 2dc:	2c 98       	cbi	0x05, 4	; 5
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	81 ee       	ldi	r24, 0xE1	; 225
 2e2:	94 e0       	ldi	r25, 0x04	; 4
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <upDownAwning+0xcc>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <upDownAwning+0xd6>
 2ee:	00 00       	nop
			_delay_ms(100);
		}
	}
	
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <init_serial_connectie>:
#define BAUDRATE 19200					// set the baudrate
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_serial_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 2fa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit
 2fe:	8e e0       	ldi	r24, 0x0E	; 14
 300:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 304:	08 95       	ret

00000306 <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 306:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 310:	e1 ec       	ldi	r30, 0xC1	; 193
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UCSR0B |= (1 << RXCIE0 );			
 31e:	80 81       	ld	r24, Z
 320:	80 68       	ori	r24, 0x80	; 128
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <init_ttc_scheduler>:
								
}

void init_ttc_scheduler()
{
	SCH_Init_T1();					//Set up scheduler
 326:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,50); //Add 'temperature' task
 32a:	42 e3       	ldi	r20, 0x32	; 50
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	84 ef       	ldi	r24, 0xF4	; 244
 334:	91 e0       	ldi	r25, 0x01	; 1
 336:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(light,2,50);		//Add 'light' task
 33a:	42 e3       	ldi	r20, 0x32	; 50
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	8e e2       	ldi	r24, 0x2E	; 46
 344:	92 e0       	ldi	r25, 0x02	; 2
 346:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,50);	//Add 'distance' task
 34a:	42 e3       	ldi	r20, 0x32	; 50
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	82 e6       	ldi	r24, 0x62	; 98
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(nextLine,4,50);	//Add 'nextline' task
 35a:	42 e3       	ldi	r20, 0x32	; 50
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	8d ed       	ldi	r24, 0xDD	; 221
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDownAwning,0,25);//Add 'updown' task
 36a:	49 e1       	ldi	r20, 0x19	; 25
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	8c e0       	ldi	r24, 0x0C	; 12
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();					//Start running the scheduler 
 37a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 37e:	08 95       	ret

00000380 <init_analog>:
}

void init_analog()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    // 16Mhz/128 = 125Khz the ADC reference clock
 380:	ea e7       	ldi	r30, 0x7A	; 122
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	87 60       	ori	r24, 0x07	; 7
 388:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 // Voltage reference from AVCC (5v)
 38a:	ac e7       	ldi	r26, 0x7C	; 124
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	8c 91       	ld	r24, X
 390:	80 64       	ori	r24, 0x40	; 64
 392:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 // Turn on ADC
 394:	80 81       	ld	r24, Z
 396:	80 68       	ori	r24, 0x80	; 128
 398:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 39a:	80 81       	ld	r24, Z
 39c:	80 64       	ori	r24, 0x40	; 64
 39e:	80 83       	st	Z, r24
 3a0:	08 95       	ret

000003a2 <init_distance>:
}

void init_distance()
{
	DDRD |= (1<< PD7);			// Pin 3 Trigger Output
 3a2:	57 9a       	sbi	0x0a, 7	; 10
	DDRD &= ~(1 << PD6);		// Pin 2 Echo Input
 3a4:	56 98       	cbi	0x0a, 6	; 10
 3a6:	08 95       	ret

000003a8 <init_LEDS>:
}

void init_LEDS()
{
	DDRB |= (1 <<PB3);			// pin0 B = output
 3a8:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1 << PB4);			// pin1 B = output
 3aa:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1 << PB5);			// pin2 B = output
 3ac:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1 << PB5);		// Green LED on
 3ae:	2d 9a       	sbi	0x05, 5	; 5
 3b0:	08 95       	ret

000003b2 <setup>:
#include "init.h"


void setup()
{
	init_serial_connectie();
 3b2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <init_serial_connectie>
	init_analog();				// Setup the ADC
 3b6:	0e 94 c0 01 	call	0x380	; 0x380 <init_analog>
	init_USART();				// Setup the USART
 3ba:	0e 94 83 01 	call	0x306	; 0x306 <init_USART>
	init_distance();			// Setup distance sensor
 3be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init_distance>
	init_ttc_scheduler();		// Setup scheduler
 3c2:	0e 94 93 01 	call	0x326	; 0x326 <init_ttc_scheduler>
	init_LEDS();				// Setup LED
 3c6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <init_LEDS>
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	81 ee       	ldi	r24, 0xE1	; 225
 3ce:	94 e0       	ldi	r25, 0x04	; 4
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <setup+0x1e>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <setup+0x28>
 3da:	00 00       	nop
 3dc:	08 95       	ret

000003de <main>:
	_delay_ms(100);				// Half second delay to initialize everything
}

int main(void)
{
	setup();
 3de:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 3e2:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <main+0x4>

000003e8 <temperature>:
#include "sensors.h"
#include "serial.h"

void temperature()
{
	analog_value = read_analog(0);
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <read_analog>
	analog_value = (((((double)analog_value / 1024) * 5) - 0.5) * 100);		 // Calculate temperature
 3ee:	bc 01       	movw	r22, r24
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 9c 03 	call	0x738	; 0x738 <__floatunsisf>
 3f8:	20 e0       	ldi	r18, 0x00	; 0
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	40 e8       	ldi	r20, 0x80	; 128
 3fe:	5a e3       	ldi	r21, 0x3A	; 58
 400:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 ea       	ldi	r20, 0xA0	; 160
 40a:	50 e4       	ldi	r21, 0x40	; 64
 40c:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	5f e3       	ldi	r21, 0x3F	; 63
 418:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__subsf3>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	48 ec       	ldi	r20, 0xC8	; 200
 422:	52 e4       	ldi	r21, 0x42	; 66
 424:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 428:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 42c:	dc 01       	movw	r26, r24
 42e:	cb 01       	movw	r24, r22
 430:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <analog_value+0x1>
 434:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <analog_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 438:	4a e0       	ldi	r20, 0x0A	; 10
 43a:	62 e4       	ldi	r22, 0x42	; 66
 43c:	71 e0       	ldi	r23, 0x01	; 1
 43e:	0e 94 b5 04 	call	0x96a	; 0x96a <__itoa_ncheck>
	itoa(analog_value, temperature_sensor, 10);								//  Convert the read value to an ascii string
	USART_putstring("t:");
 442:	8c e0       	ldi	r24, 0x0C	; 12
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
	USART_putstring(temperature_sensor);
 44a:	82 e4       	ldi	r24, 0x42	; 66
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
	USART_putstring("  ");								   //   Send the converted value to the terminal
 452:	8f e0       	ldi	r24, 0x0F	; 15
 454:	91 e0       	ldi	r25, 0x01	; 1
 456:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
 45a:	08 95       	ret

0000045c <light>:
}

void light()
{
	analog_value = read_analog(1);
 45c:	81 e0       	ldi	r24, 0x01	; 1
 45e:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <read_analog>
	analog_value = ((((double)analog_value)/1024)*100 *1.5);			  // Calculate the amount of light
 462:	bc 01       	movw	r22, r24
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 9c 03 	call	0x738	; 0x738 <__floatunsisf>
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	40 e8       	ldi	r20, 0x80	; 128
 472:	5a e3       	ldi	r21, 0x3A	; 58
 474:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 478:	20 e0       	ldi	r18, 0x00	; 0
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	48 ec       	ldi	r20, 0xC8	; 200
 47e:	52 e4       	ldi	r21, 0x42	; 66
 480:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 484:	20 e0       	ldi	r18, 0x00	; 0
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	40 ec       	ldi	r20, 0xC0	; 192
 48a:	5f e3       	ldi	r21, 0x3F	; 63
 48c:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 490:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	90 93 3c 01 	sts	0x013C, r25	; 0x80013c <analog_value+0x1>
 49c:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <analog_value>
 4a0:	4a e0       	ldi	r20, 0x0A	; 10
 4a2:	6d e3       	ldi	r22, 0x3D	; 61
 4a4:	71 e0       	ldi	r23, 0x01	; 1
 4a6:	0e 94 b5 04 	call	0x96a	; 0x96a <__itoa_ncheck>
	itoa(analog_value, light_sensor, 10);							  // Convert the read value to an ascii string
	USART_putstring("l:");
 4aa:	82 e1       	ldi	r24, 0x12	; 18
 4ac:	91 e0       	ldi	r25, 0x01	; 1
 4ae:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
	USART_putstring(light_sensor);							// Send value to the terminal
 4b2:	8d e3       	ldi	r24, 0x3D	; 61
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
	USART_putstring("  ");
 4ba:	8f e0       	ldi	r24, 0x0F	; 15
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
 4c2:	08 95       	ret

000004c4 <distance>:
}

void distance()
{
	OCR1A = 0x640;								
 4c4:	80 e4       	ldi	r24, 0x40	; 64
 4c6:	96 e0       	ldi	r25, 0x06	; 6
 4c8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 4cc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	PORTD |= (1<< PD7);
 4d0:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d2:	85 e3       	ldi	r24, 0x35	; 53
 4d4:	8a 95       	dec	r24
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <distance+0x10>
 4d8:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << PD7);							// Give pulse from 10us
 4da:	5f 98       	cbi	0x0b, 7	; 11
	
	loop_until_bit_is_set(PIND, PD6);
 4dc:	4e 9b       	sbis	0x09, 6	; 9
 4de:	fe cf       	rjmp	.-4      	; 0x4dc <distance+0x18>
	TCNT1 = 0;
 4e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 4e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	loop_until_bit_is_clear(PIND, PD6);
 4e8:	4e 99       	sbic	0x09, 6	; 9
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <distance+0x24>
	uint16_t count = TCNT1;
 4ec:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 4f0:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 9c 03 	call	0x738	; 0x738 <__floatunsisf>
 4fc:	20 e0       	ldi	r18, 0x00	; 0
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	40 e8       	ldi	r20, 0x80	; 128
 502:	5e e3       	ldi	r21, 0x3E	; 62
 504:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 508:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fixsfsi>
 50c:	dc 01       	movw	r26, r24
 50e:	cb 01       	movw	r24, r22
 510:	4a e0       	ldi	r20, 0x0A	; 10
 512:	69 e4       	ldi	r22, 0x49	; 73
 514:	71 e0       	ldi	r23, 0x01	; 1
 516:	0e 94 b5 04 	call	0x96a	; 0x96a <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	USART_putstring("d:");
 51a:	85 e1       	ldi	r24, 0x15	; 21
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
	USART_putstring(distance_sensor);
 522:	89 e4       	ldi	r24, 0x49	; 73
 524:	91 e0       	ldi	r25, 0x01	; 1
 526:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
	USART_putstring("  ");
 52a:	8f e0       	ldi	r24, 0x0F	; 15
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 ce 02 	call	0x59c	; 0x59c <USART_putstring>
 532:	08 95       	ret

00000534 <distanceStill>:

}

void distanceStill()
{
	OCR1A = 0x640;								
 534:	80 e4       	ldi	r24, 0x40	; 64
 536:	96 e0       	ldi	r25, 0x06	; 6
 538:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 53c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	PORTD |= (1 << PD7);
 540:	5f 9a       	sbi	0x0b, 7	; 11
 542:	85 e3       	ldi	r24, 0x35	; 53
 544:	8a 95       	dec	r24
 546:	f1 f7       	brne	.-4      	; 0x544 <distanceStill+0x10>
 548:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1<< PD7);							
 54a:	5f 98       	cbi	0x0b, 7	; 11
	loop_until_bit_is_set(PIND, PD6);
 54c:	4e 9b       	sbis	0x09, 6	; 9
 54e:	fe cf       	rjmp	.-4      	; 0x54c <distanceStill+0x18>
	TCNT1 = 0;
 550:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 554:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	loop_until_bit_is_clear(PIND, PD6);
 558:	4e 99       	sbic	0x09, 6	; 9
 55a:	fe cf       	rjmp	.-4      	; 0x558 <distanceStill+0x24>
	uint16_t count = TCNT1;
 55c:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 560:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 564:	80 e0       	ldi	r24, 0x00	; 0
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	0e 94 9c 03 	call	0x738	; 0x738 <__floatunsisf>
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	40 e8       	ldi	r20, 0x80	; 128
 572:	5e e3       	ldi	r21, 0x3E	; 62
 574:	0e 94 2a 04 	call	0x854	; 0x854 <__mulsf3>
 578:	0e 94 66 03 	call	0x6cc	; 0x6cc <__fixsfsi>
 57c:	dc 01       	movw	r26, r24
 57e:	cb 01       	movw	r24, r22
 580:	4a e0       	ldi	r20, 0x0A	; 10
 582:	69 e4       	ldi	r22, 0x49	; 73
 584:	71 e0       	ldi	r23, 0x01	; 1
 586:	0e 94 b5 04 	call	0x96a	; 0x96a <__itoa_ncheck>
 58a:	08 95       	ret

0000058c <USART_transmit>:
	return UDR0;
}

void USART_transmit(unsigned char data)
{	// Wait for empty transmit buffer
	loop_until_bit_is_set(UCSR0A, UDRE0);
 58c:	e0 ec       	ldi	r30, 0xC0	; 192
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	90 81       	ld	r25, Z
 592:	95 ff       	sbrs	r25, 5
 594:	fd cf       	rjmp	.-6      	; 0x590 <USART_transmit+0x4>
	//puts data into buffer, sends the data
	UDR0 = data;
 596:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 59a:	08 95       	ret

0000059c <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){       //check if there is still more chars send, this is done checking the actual char and see if it is different from the null char
 5a2:	88 81       	ld	r24, Y
 5a4:	88 23       	and	r24, r24
 5a6:	31 f0       	breq	.+12     	; 0x5b4 <USART_putstring+0x18>
 5a8:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit(*StringPtr);  // Using the simple send function we send one char at a time
 5aa:	0e 94 c6 02 	call	0x58c	; 0x58c <USART_transmit>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){       //check if there is still more chars send, this is done checking the actual char and see if it is different from the null char
 5ae:	89 91       	ld	r24, Y+
 5b0:	81 11       	cpse	r24, r1
 5b2:	fb cf       	rjmp	.-10     	; 0x5aa <USART_putstring+0xe>
		USART_transmit(*StringPtr);  // Using the simple send function we send one char at a time
	StringPtr++;}                    // Increment the pointer, so the next char can be read
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <nextLine>:

void nextLine()
{
	USART_transmit('\r');			  //Set the new line to the begin of the page
 5ba:	8d e0       	ldi	r24, 0x0D	; 13
 5bc:	0e 94 c6 02 	call	0x58c	; 0x58c <USART_transmit>
	USART_transmit('\n');			  //Go to next line
 5c0:	8a e0       	ldi	r24, 0x0A	; 10
 5c2:	0e 94 c6 02 	call	0x58c	; 0x58c <USART_transmit>
 5c6:	08 95       	ret

000005c8 <read_analog>:
}

uint16_t read_analog(uint8_t value)
{
	ADMUX &= 0xF0;                      //Clear the older channel that was read
 5c8:	ec e7       	ldi	r30, 0x7C	; 124
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	90 81       	ld	r25, Z
 5ce:	90 7f       	andi	r25, 0xF0	; 240
 5d0:	90 83       	st	Z, r25
	ADMUX |= value;                     //Defines the new analog channel to be read
 5d2:	90 81       	ld	r25, Z
 5d4:	89 2b       	or	r24, r25
 5d6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);              //Starts a new calculation
 5d8:	ea e7       	ldi	r30, 0x7A	; 122
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	80 64       	ori	r24, 0x40	; 64
 5e0:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));        //Wait until the calculation is done
 5e2:	80 81       	ld	r24, Z
 5e4:	86 fd       	sbrc	r24, 6
 5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <read_analog+0x1a>
	return ADCW;						//Returns the analog value of the selected channel
 5e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 5ec:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 5f0:	08 95       	ret

000005f2 <__subsf3>:
 5f2:	50 58       	subi	r21, 0x80	; 128

000005f4 <__addsf3>:
 5f4:	bb 27       	eor	r27, r27
 5f6:	aa 27       	eor	r26, r26
 5f8:	0e 94 11 03 	call	0x622	; 0x622 <__addsf3x>
 5fc:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_round>
 600:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscA>
 604:	38 f0       	brcs	.+14     	; 0x614 <__addsf3+0x20>
 606:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fp_pscB>
 60a:	20 f0       	brcs	.+8      	; 0x614 <__addsf3+0x20>
 60c:	39 f4       	brne	.+14     	; 0x61c <__addsf3+0x28>
 60e:	9f 3f       	cpi	r25, 0xFF	; 255
 610:	19 f4       	brne	.+6      	; 0x618 <__addsf3+0x24>
 612:	26 f4       	brtc	.+8      	; 0x61c <__addsf3+0x28>
 614:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_nan>
 618:	0e f4       	brtc	.+2      	; 0x61c <__addsf3+0x28>
 61a:	e0 95       	com	r30
 61c:	e7 fb       	bst	r30, 7
 61e:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_inf>

00000622 <__addsf3x>:
 622:	e9 2f       	mov	r30, r25
 624:	0e 94 01 04 	call	0x802	; 0x802 <__fp_split3>
 628:	58 f3       	brcs	.-42     	; 0x600 <__addsf3+0xc>
 62a:	ba 17       	cp	r27, r26
 62c:	62 07       	cpc	r22, r18
 62e:	73 07       	cpc	r23, r19
 630:	84 07       	cpc	r24, r20
 632:	95 07       	cpc	r25, r21
 634:	20 f0       	brcs	.+8      	; 0x63e <__addsf3x+0x1c>
 636:	79 f4       	brne	.+30     	; 0x656 <__addsf3x+0x34>
 638:	a6 f5       	brtc	.+104    	; 0x6a2 <__addsf3x+0x80>
 63a:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_zero>
 63e:	0e f4       	brtc	.+2      	; 0x642 <__addsf3x+0x20>
 640:	e0 95       	com	r30
 642:	0b 2e       	mov	r0, r27
 644:	ba 2f       	mov	r27, r26
 646:	a0 2d       	mov	r26, r0
 648:	0b 01       	movw	r0, r22
 64a:	b9 01       	movw	r22, r18
 64c:	90 01       	movw	r18, r0
 64e:	0c 01       	movw	r0, r24
 650:	ca 01       	movw	r24, r20
 652:	a0 01       	movw	r20, r0
 654:	11 24       	eor	r1, r1
 656:	ff 27       	eor	r31, r31
 658:	59 1b       	sub	r21, r25
 65a:	99 f0       	breq	.+38     	; 0x682 <__addsf3x+0x60>
 65c:	59 3f       	cpi	r21, 0xF9	; 249
 65e:	50 f4       	brcc	.+20     	; 0x674 <__addsf3x+0x52>
 660:	50 3e       	cpi	r21, 0xE0	; 224
 662:	68 f1       	brcs	.+90     	; 0x6be <__addsf3x+0x9c>
 664:	1a 16       	cp	r1, r26
 666:	f0 40       	sbci	r31, 0x00	; 0
 668:	a2 2f       	mov	r26, r18
 66a:	23 2f       	mov	r18, r19
 66c:	34 2f       	mov	r19, r20
 66e:	44 27       	eor	r20, r20
 670:	58 5f       	subi	r21, 0xF8	; 248
 672:	f3 cf       	rjmp	.-26     	; 0x65a <__addsf3x+0x38>
 674:	46 95       	lsr	r20
 676:	37 95       	ror	r19
 678:	27 95       	ror	r18
 67a:	a7 95       	ror	r26
 67c:	f0 40       	sbci	r31, 0x00	; 0
 67e:	53 95       	inc	r21
 680:	c9 f7       	brne	.-14     	; 0x674 <__addsf3x+0x52>
 682:	7e f4       	brtc	.+30     	; 0x6a2 <__addsf3x+0x80>
 684:	1f 16       	cp	r1, r31
 686:	ba 0b       	sbc	r27, r26
 688:	62 0b       	sbc	r22, r18
 68a:	73 0b       	sbc	r23, r19
 68c:	84 0b       	sbc	r24, r20
 68e:	ba f0       	brmi	.+46     	; 0x6be <__addsf3x+0x9c>
 690:	91 50       	subi	r25, 0x01	; 1
 692:	a1 f0       	breq	.+40     	; 0x6bc <__addsf3x+0x9a>
 694:	ff 0f       	add	r31, r31
 696:	bb 1f       	adc	r27, r27
 698:	66 1f       	adc	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	c2 f7       	brpl	.-16     	; 0x690 <__addsf3x+0x6e>
 6a0:	0e c0       	rjmp	.+28     	; 0x6be <__addsf3x+0x9c>
 6a2:	ba 0f       	add	r27, r26
 6a4:	62 1f       	adc	r22, r18
 6a6:	73 1f       	adc	r23, r19
 6a8:	84 1f       	adc	r24, r20
 6aa:	48 f4       	brcc	.+18     	; 0x6be <__addsf3x+0x9c>
 6ac:	87 95       	ror	r24
 6ae:	77 95       	ror	r23
 6b0:	67 95       	ror	r22
 6b2:	b7 95       	ror	r27
 6b4:	f7 95       	ror	r31
 6b6:	9e 3f       	cpi	r25, 0xFE	; 254
 6b8:	08 f0       	brcs	.+2      	; 0x6bc <__addsf3x+0x9a>
 6ba:	b0 cf       	rjmp	.-160    	; 0x61c <__addsf3+0x28>
 6bc:	93 95       	inc	r25
 6be:	88 0f       	add	r24, r24
 6c0:	08 f0       	brcs	.+2      	; 0x6c4 <__addsf3x+0xa2>
 6c2:	99 27       	eor	r25, r25
 6c4:	ee 0f       	add	r30, r30
 6c6:	97 95       	ror	r25
 6c8:	87 95       	ror	r24
 6ca:	08 95       	ret

000006cc <__fixsfsi>:
 6cc:	0e 94 6d 03 	call	0x6da	; 0x6da <__fixunssfsi>
 6d0:	68 94       	set
 6d2:	b1 11       	cpse	r27, r1
 6d4:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_szero>
 6d8:	08 95       	ret

000006da <__fixunssfsi>:
 6da:	0e 94 09 04 	call	0x812	; 0x812 <__fp_splitA>
 6de:	88 f0       	brcs	.+34     	; 0x702 <__fixunssfsi+0x28>
 6e0:	9f 57       	subi	r25, 0x7F	; 127
 6e2:	98 f0       	brcs	.+38     	; 0x70a <__fixunssfsi+0x30>
 6e4:	b9 2f       	mov	r27, r25
 6e6:	99 27       	eor	r25, r25
 6e8:	b7 51       	subi	r27, 0x17	; 23
 6ea:	b0 f0       	brcs	.+44     	; 0x718 <__fixunssfsi+0x3e>
 6ec:	e1 f0       	breq	.+56     	; 0x726 <__fixunssfsi+0x4c>
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	88 1f       	adc	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	1a f0       	brmi	.+6      	; 0x6fe <__fixunssfsi+0x24>
 6f8:	ba 95       	dec	r27
 6fa:	c9 f7       	brne	.-14     	; 0x6ee <__fixunssfsi+0x14>
 6fc:	14 c0       	rjmp	.+40     	; 0x726 <__fixunssfsi+0x4c>
 6fe:	b1 30       	cpi	r27, 0x01	; 1
 700:	91 f0       	breq	.+36     	; 0x726 <__fixunssfsi+0x4c>
 702:	0e 94 23 04 	call	0x846	; 0x846 <__fp_zero>
 706:	b1 e0       	ldi	r27, 0x01	; 1
 708:	08 95       	ret
 70a:	0c 94 23 04 	jmp	0x846	; 0x846 <__fp_zero>
 70e:	67 2f       	mov	r22, r23
 710:	78 2f       	mov	r23, r24
 712:	88 27       	eor	r24, r24
 714:	b8 5f       	subi	r27, 0xF8	; 248
 716:	39 f0       	breq	.+14     	; 0x726 <__fixunssfsi+0x4c>
 718:	b9 3f       	cpi	r27, 0xF9	; 249
 71a:	cc f3       	brlt	.-14     	; 0x70e <__fixunssfsi+0x34>
 71c:	86 95       	lsr	r24
 71e:	77 95       	ror	r23
 720:	67 95       	ror	r22
 722:	b3 95       	inc	r27
 724:	d9 f7       	brne	.-10     	; 0x71c <__fixunssfsi+0x42>
 726:	3e f4       	brtc	.+14     	; 0x736 <__fixunssfsi+0x5c>
 728:	90 95       	com	r25
 72a:	80 95       	com	r24
 72c:	70 95       	com	r23
 72e:	61 95       	neg	r22
 730:	7f 4f       	sbci	r23, 0xFF	; 255
 732:	8f 4f       	sbci	r24, 0xFF	; 255
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	08 95       	ret

00000738 <__floatunsisf>:
 738:	e8 94       	clt
 73a:	09 c0       	rjmp	.+18     	; 0x74e <__floatsisf+0x12>

0000073c <__floatsisf>:
 73c:	97 fb       	bst	r25, 7
 73e:	3e f4       	brtc	.+14     	; 0x74e <__floatsisf+0x12>
 740:	90 95       	com	r25
 742:	80 95       	com	r24
 744:	70 95       	com	r23
 746:	61 95       	neg	r22
 748:	7f 4f       	sbci	r23, 0xFF	; 255
 74a:	8f 4f       	sbci	r24, 0xFF	; 255
 74c:	9f 4f       	sbci	r25, 0xFF	; 255
 74e:	99 23       	and	r25, r25
 750:	a9 f0       	breq	.+42     	; 0x77c <__floatsisf+0x40>
 752:	f9 2f       	mov	r31, r25
 754:	96 e9       	ldi	r25, 0x96	; 150
 756:	bb 27       	eor	r27, r27
 758:	93 95       	inc	r25
 75a:	f6 95       	lsr	r31
 75c:	87 95       	ror	r24
 75e:	77 95       	ror	r23
 760:	67 95       	ror	r22
 762:	b7 95       	ror	r27
 764:	f1 11       	cpse	r31, r1
 766:	f8 cf       	rjmp	.-16     	; 0x758 <__floatsisf+0x1c>
 768:	fa f4       	brpl	.+62     	; 0x7a8 <__floatsisf+0x6c>
 76a:	bb 0f       	add	r27, r27
 76c:	11 f4       	brne	.+4      	; 0x772 <__floatsisf+0x36>
 76e:	60 ff       	sbrs	r22, 0
 770:	1b c0       	rjmp	.+54     	; 0x7a8 <__floatsisf+0x6c>
 772:	6f 5f       	subi	r22, 0xFF	; 255
 774:	7f 4f       	sbci	r23, 0xFF	; 255
 776:	8f 4f       	sbci	r24, 0xFF	; 255
 778:	9f 4f       	sbci	r25, 0xFF	; 255
 77a:	16 c0       	rjmp	.+44     	; 0x7a8 <__floatsisf+0x6c>
 77c:	88 23       	and	r24, r24
 77e:	11 f0       	breq	.+4      	; 0x784 <__floatsisf+0x48>
 780:	96 e9       	ldi	r25, 0x96	; 150
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <__floatsisf+0x6a>
 784:	77 23       	and	r23, r23
 786:	21 f0       	breq	.+8      	; 0x790 <__floatsisf+0x54>
 788:	9e e8       	ldi	r25, 0x8E	; 142
 78a:	87 2f       	mov	r24, r23
 78c:	76 2f       	mov	r23, r22
 78e:	05 c0       	rjmp	.+10     	; 0x79a <__floatsisf+0x5e>
 790:	66 23       	and	r22, r22
 792:	71 f0       	breq	.+28     	; 0x7b0 <__floatsisf+0x74>
 794:	96 e8       	ldi	r25, 0x86	; 134
 796:	86 2f       	mov	r24, r22
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	60 e0       	ldi	r22, 0x00	; 0
 79c:	2a f0       	brmi	.+10     	; 0x7a8 <__floatsisf+0x6c>
 79e:	9a 95       	dec	r25
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	88 1f       	adc	r24, r24
 7a6:	da f7       	brpl	.-10     	; 0x79e <__floatsisf+0x62>
 7a8:	88 0f       	add	r24, r24
 7aa:	96 95       	lsr	r25
 7ac:	87 95       	ror	r24
 7ae:	97 f9       	bld	r25, 7
 7b0:	08 95       	ret

000007b2 <__fp_inf>:
 7b2:	97 f9       	bld	r25, 7
 7b4:	9f 67       	ori	r25, 0x7F	; 127
 7b6:	80 e8       	ldi	r24, 0x80	; 128
 7b8:	70 e0       	ldi	r23, 0x00	; 0
 7ba:	60 e0       	ldi	r22, 0x00	; 0
 7bc:	08 95       	ret

000007be <__fp_nan>:
 7be:	9f ef       	ldi	r25, 0xFF	; 255
 7c0:	80 ec       	ldi	r24, 0xC0	; 192
 7c2:	08 95       	ret

000007c4 <__fp_pscA>:
 7c4:	00 24       	eor	r0, r0
 7c6:	0a 94       	dec	r0
 7c8:	16 16       	cp	r1, r22
 7ca:	17 06       	cpc	r1, r23
 7cc:	18 06       	cpc	r1, r24
 7ce:	09 06       	cpc	r0, r25
 7d0:	08 95       	ret

000007d2 <__fp_pscB>:
 7d2:	00 24       	eor	r0, r0
 7d4:	0a 94       	dec	r0
 7d6:	12 16       	cp	r1, r18
 7d8:	13 06       	cpc	r1, r19
 7da:	14 06       	cpc	r1, r20
 7dc:	05 06       	cpc	r0, r21
 7de:	08 95       	ret

000007e0 <__fp_round>:
 7e0:	09 2e       	mov	r0, r25
 7e2:	03 94       	inc	r0
 7e4:	00 0c       	add	r0, r0
 7e6:	11 f4       	brne	.+4      	; 0x7ec <__fp_round+0xc>
 7e8:	88 23       	and	r24, r24
 7ea:	52 f0       	brmi	.+20     	; 0x800 <__fp_round+0x20>
 7ec:	bb 0f       	add	r27, r27
 7ee:	40 f4       	brcc	.+16     	; 0x800 <__fp_round+0x20>
 7f0:	bf 2b       	or	r27, r31
 7f2:	11 f4       	brne	.+4      	; 0x7f8 <__fp_round+0x18>
 7f4:	60 ff       	sbrs	r22, 0
 7f6:	04 c0       	rjmp	.+8      	; 0x800 <__fp_round+0x20>
 7f8:	6f 5f       	subi	r22, 0xFF	; 255
 7fa:	7f 4f       	sbci	r23, 0xFF	; 255
 7fc:	8f 4f       	sbci	r24, 0xFF	; 255
 7fe:	9f 4f       	sbci	r25, 0xFF	; 255
 800:	08 95       	ret

00000802 <__fp_split3>:
 802:	57 fd       	sbrc	r21, 7
 804:	90 58       	subi	r25, 0x80	; 128
 806:	44 0f       	add	r20, r20
 808:	55 1f       	adc	r21, r21
 80a:	59 f0       	breq	.+22     	; 0x822 <__fp_splitA+0x10>
 80c:	5f 3f       	cpi	r21, 0xFF	; 255
 80e:	71 f0       	breq	.+28     	; 0x82c <__fp_splitA+0x1a>
 810:	47 95       	ror	r20

00000812 <__fp_splitA>:
 812:	88 0f       	add	r24, r24
 814:	97 fb       	bst	r25, 7
 816:	99 1f       	adc	r25, r25
 818:	61 f0       	breq	.+24     	; 0x832 <__fp_splitA+0x20>
 81a:	9f 3f       	cpi	r25, 0xFF	; 255
 81c:	79 f0       	breq	.+30     	; 0x83c <__fp_splitA+0x2a>
 81e:	87 95       	ror	r24
 820:	08 95       	ret
 822:	12 16       	cp	r1, r18
 824:	13 06       	cpc	r1, r19
 826:	14 06       	cpc	r1, r20
 828:	55 1f       	adc	r21, r21
 82a:	f2 cf       	rjmp	.-28     	; 0x810 <__fp_split3+0xe>
 82c:	46 95       	lsr	r20
 82e:	f1 df       	rcall	.-30     	; 0x812 <__fp_splitA>
 830:	08 c0       	rjmp	.+16     	; 0x842 <__fp_splitA+0x30>
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	18 06       	cpc	r1, r24
 838:	99 1f       	adc	r25, r25
 83a:	f1 cf       	rjmp	.-30     	; 0x81e <__fp_splitA+0xc>
 83c:	86 95       	lsr	r24
 83e:	71 05       	cpc	r23, r1
 840:	61 05       	cpc	r22, r1
 842:	08 94       	sec
 844:	08 95       	ret

00000846 <__fp_zero>:
 846:	e8 94       	clt

00000848 <__fp_szero>:
 848:	bb 27       	eor	r27, r27
 84a:	66 27       	eor	r22, r22
 84c:	77 27       	eor	r23, r23
 84e:	cb 01       	movw	r24, r22
 850:	97 f9       	bld	r25, 7
 852:	08 95       	ret

00000854 <__mulsf3>:
 854:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3x>
 858:	0c 94 f0 03 	jmp	0x7e0	; 0x7e0 <__fp_round>
 85c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__fp_pscA>
 860:	38 f0       	brcs	.+14     	; 0x870 <__mulsf3+0x1c>
 862:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__fp_pscB>
 866:	20 f0       	brcs	.+8      	; 0x870 <__mulsf3+0x1c>
 868:	95 23       	and	r25, r21
 86a:	11 f0       	breq	.+4      	; 0x870 <__mulsf3+0x1c>
 86c:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_inf>
 870:	0c 94 df 03 	jmp	0x7be	; 0x7be <__fp_nan>
 874:	11 24       	eor	r1, r1
 876:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_szero>

0000087a <__mulsf3x>:
 87a:	0e 94 01 04 	call	0x802	; 0x802 <__fp_split3>
 87e:	70 f3       	brcs	.-36     	; 0x85c <__mulsf3+0x8>

00000880 <__mulsf3_pse>:
 880:	95 9f       	mul	r25, r21
 882:	c1 f3       	breq	.-16     	; 0x874 <__mulsf3+0x20>
 884:	95 0f       	add	r25, r21
 886:	50 e0       	ldi	r21, 0x00	; 0
 888:	55 1f       	adc	r21, r21
 88a:	62 9f       	mul	r22, r18
 88c:	f0 01       	movw	r30, r0
 88e:	72 9f       	mul	r23, r18
 890:	bb 27       	eor	r27, r27
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	63 9f       	mul	r22, r19
 898:	aa 27       	eor	r26, r26
 89a:	f0 0d       	add	r31, r0
 89c:	b1 1d       	adc	r27, r1
 89e:	aa 1f       	adc	r26, r26
 8a0:	64 9f       	mul	r22, r20
 8a2:	66 27       	eor	r22, r22
 8a4:	b0 0d       	add	r27, r0
 8a6:	a1 1d       	adc	r26, r1
 8a8:	66 1f       	adc	r22, r22
 8aa:	82 9f       	mul	r24, r18
 8ac:	22 27       	eor	r18, r18
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	73 9f       	mul	r23, r19
 8b6:	b0 0d       	add	r27, r0
 8b8:	a1 1d       	adc	r26, r1
 8ba:	62 1f       	adc	r22, r18
 8bc:	83 9f       	mul	r24, r19
 8be:	a0 0d       	add	r26, r0
 8c0:	61 1d       	adc	r22, r1
 8c2:	22 1f       	adc	r18, r18
 8c4:	74 9f       	mul	r23, r20
 8c6:	33 27       	eor	r19, r19
 8c8:	a0 0d       	add	r26, r0
 8ca:	61 1d       	adc	r22, r1
 8cc:	23 1f       	adc	r18, r19
 8ce:	84 9f       	mul	r24, r20
 8d0:	60 0d       	add	r22, r0
 8d2:	21 1d       	adc	r18, r1
 8d4:	82 2f       	mov	r24, r18
 8d6:	76 2f       	mov	r23, r22
 8d8:	6a 2f       	mov	r22, r26
 8da:	11 24       	eor	r1, r1
 8dc:	9f 57       	subi	r25, 0x7F	; 127
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	9a f0       	brmi	.+38     	; 0x908 <__stack+0x9>
 8e2:	f1 f0       	breq	.+60     	; 0x920 <__stack+0x21>
 8e4:	88 23       	and	r24, r24
 8e6:	4a f0       	brmi	.+18     	; 0x8fa <__mulsf3_pse+0x7a>
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	bb 1f       	adc	r27, r27
 8ee:	66 1f       	adc	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__mulsf3_pse+0x64>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	80 f0       	brcs	.+32     	; 0x920 <__stack+0x21>
 900:	0c 94 d9 03 	jmp	0x7b2	; 0x7b2 <__fp_inf>
 904:	0c 94 24 04 	jmp	0x848	; 0x848 <__fp_szero>
 908:	5f 3f       	cpi	r21, 0xFF	; 255
 90a:	e4 f3       	brlt	.-8      	; 0x904 <__stack+0x5>
 90c:	98 3e       	cpi	r25, 0xE8	; 232
 90e:	d4 f3       	brlt	.-12     	; 0x904 <__stack+0x5>
 910:	86 95       	lsr	r24
 912:	77 95       	ror	r23
 914:	67 95       	ror	r22
 916:	b7 95       	ror	r27
 918:	f7 95       	ror	r31
 91a:	e7 95       	ror	r30
 91c:	9f 5f       	subi	r25, 0xFF	; 255
 91e:	c1 f7       	brne	.-16     	; 0x910 <__stack+0x11>
 920:	fe 2b       	or	r31, r30
 922:	88 0f       	add	r24, r24
 924:	91 1d       	adc	r25, r1
 926:	96 95       	lsr	r25
 928:	87 95       	ror	r24
 92a:	97 f9       	bld	r25, 7
 92c:	08 95       	ret

0000092e <atoi>:
 92e:	fc 01       	movw	r30, r24
 930:	88 27       	eor	r24, r24
 932:	99 27       	eor	r25, r25
 934:	e8 94       	clt
 936:	21 91       	ld	r18, Z+
 938:	20 32       	cpi	r18, 0x20	; 32
 93a:	e9 f3       	breq	.-6      	; 0x936 <atoi+0x8>
 93c:	29 30       	cpi	r18, 0x09	; 9
 93e:	10 f0       	brcs	.+4      	; 0x944 <atoi+0x16>
 940:	2e 30       	cpi	r18, 0x0E	; 14
 942:	c8 f3       	brcs	.-14     	; 0x936 <atoi+0x8>
 944:	2b 32       	cpi	r18, 0x2B	; 43
 946:	41 f0       	breq	.+16     	; 0x958 <atoi+0x2a>
 948:	2d 32       	cpi	r18, 0x2D	; 45
 94a:	39 f4       	brne	.+14     	; 0x95a <atoi+0x2c>
 94c:	68 94       	set
 94e:	04 c0       	rjmp	.+8      	; 0x958 <atoi+0x2a>
 950:	0e 94 c0 04 	call	0x980	; 0x980 <__mulhi_const_10>
 954:	82 0f       	add	r24, r18
 956:	91 1d       	adc	r25, r1
 958:	21 91       	ld	r18, Z+
 95a:	20 53       	subi	r18, 0x30	; 48
 95c:	2a 30       	cpi	r18, 0x0A	; 10
 95e:	c0 f3       	brcs	.-16     	; 0x950 <atoi+0x22>
 960:	1e f4       	brtc	.+6      	; 0x968 <atoi+0x3a>
 962:	90 95       	com	r25
 964:	81 95       	neg	r24
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <__itoa_ncheck>:
 96a:	bb 27       	eor	r27, r27
 96c:	4a 30       	cpi	r20, 0x0A	; 10
 96e:	31 f4       	brne	.+12     	; 0x97c <__itoa_ncheck+0x12>
 970:	99 23       	and	r25, r25
 972:	22 f4       	brpl	.+8      	; 0x97c <__itoa_ncheck+0x12>
 974:	bd e2       	ldi	r27, 0x2D	; 45
 976:	90 95       	com	r25
 978:	81 95       	neg	r24
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	0c 94 c9 04 	jmp	0x992	; 0x992 <__utoa_common>

00000980 <__mulhi_const_10>:
 980:	7a e0       	ldi	r23, 0x0A	; 10
 982:	97 9f       	mul	r25, r23
 984:	90 2d       	mov	r25, r0
 986:	87 9f       	mul	r24, r23
 988:	80 2d       	mov	r24, r0
 98a:	91 0d       	add	r25, r1
 98c:	11 24       	eor	r1, r1
 98e:	08 95       	ret

00000990 <__utoa_ncheck>:
 990:	bb 27       	eor	r27, r27

00000992 <__utoa_common>:
 992:	fb 01       	movw	r30, r22
 994:	55 27       	eor	r21, r21
 996:	aa 27       	eor	r26, r26
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	aa 1f       	adc	r26, r26
 99e:	a4 17       	cp	r26, r20
 9a0:	10 f0       	brcs	.+4      	; 0x9a6 <__utoa_common+0x14>
 9a2:	a4 1b       	sub	r26, r20
 9a4:	83 95       	inc	r24
 9a6:	50 51       	subi	r21, 0x10	; 16
 9a8:	b9 f7       	brne	.-18     	; 0x998 <__utoa_common+0x6>
 9aa:	a0 5d       	subi	r26, 0xD0	; 208
 9ac:	aa 33       	cpi	r26, 0x3A	; 58
 9ae:	08 f0       	brcs	.+2      	; 0x9b2 <__utoa_common+0x20>
 9b0:	a9 5d       	subi	r26, 0xD9	; 217
 9b2:	a1 93       	st	Z+, r26
 9b4:	00 97       	sbiw	r24, 0x00	; 0
 9b6:	79 f7       	brne	.-34     	; 0x996 <__utoa_common+0x4>
 9b8:	b1 11       	cpse	r27, r1
 9ba:	b1 93       	st	Z+, r27
 9bc:	11 92       	st	Z+, r1
 9be:	cb 01       	movw	r24, r22
 9c0:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <strrev>

000009c4 <strrev>:
 9c4:	dc 01       	movw	r26, r24
 9c6:	fc 01       	movw	r30, r24
 9c8:	67 2f       	mov	r22, r23
 9ca:	71 91       	ld	r23, Z+
 9cc:	77 23       	and	r23, r23
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <strrev+0x4>
 9d0:	32 97       	sbiw	r30, 0x02	; 2
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <strrev+0x18>
 9d4:	7c 91       	ld	r23, X
 9d6:	6d 93       	st	X+, r22
 9d8:	70 83       	st	Z, r23
 9da:	62 91       	ld	r22, -Z
 9dc:	ae 17       	cp	r26, r30
 9de:	bf 07       	cpc	r27, r31
 9e0:	c8 f3       	brcs	.-14     	; 0x9d4 <strrev+0x10>
 9e2:	08 95       	ret

000009e4 <_exit>:
 9e4:	f8 94       	cli

000009e6 <__stop_program>:
 9e6:	ff cf       	rjmp	.-2      	; 0x9e6 <__stop_program>
