
Embedded_Systems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000860  000008f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000860  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800116  00800116  0000090a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000090a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000093c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000163a  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d18  00000000  00000000  0000210e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bdc  00000000  00000000  00002e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00003a04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000696  00000000  00000000  00003ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000714  00000000  00000000  0000433a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e6       	ldi	r30, 0x60	; 96
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 35       	cpi	r26, 0x51	; 81
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <main>
  9e:	0c 94 2e 04 	jmp	0x85c	; 0x85c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
  b4:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e6 e1       	ldi	r30, 0x16	; 22
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ea 5e       	subi	r30, 0xEA	; 234
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ea 5e       	subi	r30, 0xEA	; 234
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c6 e1       	ldi	r28, 0x16	; 22
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e6 e1       	ldi	r30, 0x16	; 22
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	29 e3       	ldi	r18, 0x39	; 57
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <init_USART>:


void init_USART()
{
	/* Set baud rate */
	UBRR0H = 0;
 218:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = UBBRVAL;
 21c:	83 e3       	ldi	r24, 0x33	; 51
 21e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 222:	88 e1       	ldi	r24, 0x18	; 24
 224:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (1<<UCSZ01) |(1<<UCSZ00);
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 22e:	08 95       	ret

00000230 <init_ttc_scheduler>:
}

void init_ttc_scheduler()
{
	SCH_Init_T1();					//Set up scheduler
 230:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,100); //Add 'temperature' task
 234:	44 e6       	ldi	r20, 0x64	; 100
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	84 e9       	ldi	r24, 0x94	; 148
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(light,2,100);		//Add 'light' task
 244:	44 e6       	ldi	r20, 0x64	; 100
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	70 e0       	ldi	r23, 0x00	; 0
 24c:	88 ec       	ldi	r24, 0xC8	; 200
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,100);	//Add 'distance' task
 254:	44 e6       	ldi	r20, 0x64	; 100
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	63 e0       	ldi	r22, 0x03	; 3
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	86 ef       	ldi	r24, 0xF6	; 246
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(putString,4,50);	//Add 'putString' task
 264:	42 e3       	ldi	r20, 0x32	; 50
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	64 e0       	ldi	r22, 0x04	; 4
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	8f e6       	ldi	r24, 0x6F	; 111
 26e:	91 e0       	ldi	r25, 0x01	; 1
 270:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(upDownAwning,0,25);//Add 'updown' task
	SCH_Start();					//Start running the scheduler 
 274:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 278:	08 95       	ret

0000027a <init_analog>:
}

void init_analog()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    // 16Mhz/128 = 125Khz the ADC reference clock
 27a:	ea e7       	ldi	r30, 0x7A	; 122
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	87 60       	ori	r24, 0x07	; 7
 282:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 // Voltage reference from AVCC (5v)
 284:	ac e7       	ldi	r26, 0x7C	; 124
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	8c 91       	ld	r24, X
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 // Turn on ADC
 28e:	80 81       	ld	r24, Z
 290:	80 68       	ori	r24, 0x80	; 128
 292:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 294:	80 81       	ld	r24, Z
 296:	80 64       	ori	r24, 0x40	; 64
 298:	80 83       	st	Z, r24
 29a:	08 95       	ret

0000029c <init_distance>:
}

void init_distance()
{
	DDRD |= (1<< PD7);			// Pin 3 Trigger Output
 29c:	57 9a       	sbi	0x0a, 7	; 10
	DDRD &= ~(1 << PD6);		// Pin 2 Echo Input
 29e:	56 98       	cbi	0x0a, 6	; 10
 2a0:	08 95       	ret

000002a2 <init_LEDS>:
}

void init_LEDS()
{
	DDRB |= (1 <<PB3);			// pin0 B = output
 2a2:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1 << PB4);			// pin1 B = output
 2a4:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1 << PB5);			// pin2 B = output
 2a6:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1 << PB5);		// Green LED on
 2a8:	2d 9a       	sbi	0x05, 5	; 5
 2aa:	08 95       	ret

000002ac <setup>:
#include "init.h"


void setup()
{
	init_analog();				// Setup the ADC
 2ac:	0e 94 3d 01 	call	0x27a	; 0x27a <init_analog>
	init_USART();				// Setup the USART
 2b0:	0e 94 0c 01 	call	0x218	; 0x218 <init_USART>
	init_distance();			// Setup distance sensor
 2b4:	0e 94 4e 01 	call	0x29c	; 0x29c <init_distance>
	init_ttc_scheduler();		// Setup scheduler
 2b8:	0e 94 18 01 	call	0x230	; 0x230 <init_ttc_scheduler>
	init_LEDS();				// Setup LED
 2bc:	0e 94 51 01 	call	0x2a2	; 0x2a2 <init_LEDS>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	81 ee       	ldi	r24, 0xE1	; 225
 2c4:	94 e0       	ldi	r25, 0x04	; 4
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <setup+0x1a>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <setup+0x24>
 2d0:	00 00       	nop
 2d2:	08 95       	ret

000002d4 <main>:
	_delay_ms(100);				// Half second delay to initialize everything
}

int main(void)
{
	setup();
 2d4:	0e 94 56 01 	call	0x2ac	; 0x2ac <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 2d8:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 2dc:	fd cf       	rjmp	.-6      	; 0x2d8 <main+0x4>

000002de <putString>:
#include "sensors.h"
#include "serial.h"

char *values[] = {"0","0","0"};

void putString(){
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
	
	USART_putstring("{t:");
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 30 02 	call	0x460	; 0x460 <USART_putstring>
	USART_putstring(values[0]);
 2ea:	c0 e0       	ldi	r28, 0x00	; 0
 2ec:	d1 e0       	ldi	r29, 0x01	; 1
 2ee:	88 81       	ld	r24, Y
 2f0:	99 81       	ldd	r25, Y+1	; 0x01
 2f2:	0e 94 30 02 	call	0x460	; 0x460 <USART_putstring>
	USART_putstring(",l:");
 2f6:	8a e0       	ldi	r24, 0x0A	; 10
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 30 02 	call	0x460	; 0x460 <USART_putstring>
	USART_putstring(values[1]);
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	9b 81       	ldd	r25, Y+3	; 0x03
 302:	0e 94 30 02 	call	0x460	; 0x460 <USART_putstring>
	USART_putstring(",d:");
 306:	8e e0       	ldi	r24, 0x0E	; 14
 308:	91 e0       	ldi	r25, 0x01	; 1
 30a:	0e 94 30 02 	call	0x460	; 0x460 <USART_putstring>
	USART_putstring(values[2]);
 30e:	8c 81       	ldd	r24, Y+4	; 0x04
 310:	9d 81       	ldd	r25, Y+5	; 0x05
 312:	0e 94 30 02 	call	0x460	; 0x460 <USART_putstring>
	USART_putstring("}");
 316:	82 e1       	ldi	r24, 0x12	; 18
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 30 02 	call	0x460	; 0x460 <USART_putstring>
	
	nextLine();
 31e:	0e 94 3f 02 	call	0x47e	; 0x47e <nextLine>
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <temperature>:

void temperature()
{
	analog_value = read_analog(0);
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 46 02 	call	0x48c	; 0x48c <read_analog>
	analog_value = (((((double)analog_value / 1024) * 5) - 0.5) * 100);		 // Calculate temperature
 32e:	bc 01       	movw	r22, r24
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatunsisf>
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	40 e8       	ldi	r20, 0x80	; 128
 33e:	5a e3       	ldi	r21, 0x3A	; 58
 340:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	40 ea       	ldi	r20, 0xA0	; 160
 34a:	50 e4       	ldi	r21, 0x40	; 64
 34c:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 350:	20 e0       	ldi	r18, 0x00	; 0
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	5f e3       	ldi	r21, 0x3F	; 63
 358:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__subsf3>
 35c:	20 e0       	ldi	r18, 0x00	; 0
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	48 ec       	ldi	r20, 0xC8	; 200
 362:	52 e4       	ldi	r21, 0x42	; 66
 364:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 368:	0e 94 cf 02 	call	0x59e	; 0x59e <__fixunssfsi>
 36c:	dc 01       	movw	r26, r24
 36e:	cb 01       	movw	r24, r22
 370:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <analog_value+0x1>
 374:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <analog_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 378:	4a e0       	ldi	r20, 0x0A	; 10
 37a:	60 e4       	ldi	r22, 0x40	; 64
 37c:	71 e0       	ldi	r23, 0x01	; 1
 37e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__itoa_ncheck>
	itoa(analog_value, temperature_sensor, 10);								//  Convert the read value to an ascii string
	values[0] = temperature_sensor;
 382:	80 e4       	ldi	r24, 0x40	; 64
 384:	91 e0       	ldi	r25, 0x01	; 1
 386:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 38a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 38e:	08 95       	ret

00000390 <light>:
}

void light()
{
	analog_value = read_analog(1);
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 46 02 	call	0x48c	; 0x48c <read_analog>
	analog_value = ((((double)analog_value)/1024)*100 *1.5);			  // Calculate the amount of light
 396:	bc 01       	movw	r22, r24
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatunsisf>
 3a0:	20 e0       	ldi	r18, 0x00	; 0
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	40 e8       	ldi	r20, 0x80	; 128
 3a6:	5a e3       	ldi	r21, 0x3A	; 58
 3a8:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	48 ec       	ldi	r20, 0xC8	; 200
 3b2:	52 e4       	ldi	r21, 0x42	; 66
 3b4:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 3b8:	20 e0       	ldi	r18, 0x00	; 0
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	40 ec       	ldi	r20, 0xC0	; 192
 3be:	5f e3       	ldi	r21, 0x3F	; 63
 3c0:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 3c4:	0e 94 cf 02 	call	0x59e	; 0x59e <__fixunssfsi>
 3c8:	dc 01       	movw	r26, r24
 3ca:	cb 01       	movw	r24, r22
 3cc:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <analog_value+0x1>
 3d0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <analog_value>
 3d4:	4a e0       	ldi	r20, 0x0A	; 10
 3d6:	6b e3       	ldi	r22, 0x3B	; 59
 3d8:	71 e0       	ldi	r23, 0x01	; 1
 3da:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__itoa_ncheck>
	itoa(analog_value, light_sensor, 10);							  // Convert the read value to an ascii string
	values[1] = light_sensor;											// Send value to the terminal
 3de:	8b e3       	ldi	r24, 0x3B	; 59
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 3e6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 3ea:	08 95       	ret

000003ec <distance>:
}

void distance()
{
	OCR1A = 0x640;								
 3ec:	80 e4       	ldi	r24, 0x40	; 64
 3ee:	96 e0       	ldi	r25, 0x06	; 6
 3f0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 3f4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	PORTD |= (1<< PD7);
 3f8:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fa:	85 e3       	ldi	r24, 0x35	; 53
 3fc:	8a 95       	dec	r24
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <distance+0x10>
 400:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << PD7);							// Give pulse from 10us]]200000000000
 402:	5f 98       	cbi	0x0b, 7	; 11
	loop_until_bit_is_set(PIND, PD6);
 404:	4e 9b       	sbis	0x09, 6	; 9
 406:	fe cf       	rjmp	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	TCNT1 = 0;
 408:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 40c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	loop_until_bit_is_clear(PIND, PD6);
 410:	4e 99       	sbic	0x09, 6	; 9
 412:	fe cf       	rjmp	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	uint16_t count = TCNT1;
 414:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 418:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__floatunsisf>
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	40 e8       	ldi	r20, 0x80	; 128
 42a:	5e e3       	ldi	r21, 0x3E	; 62
 42c:	0e 94 8c 03 	call	0x718	; 0x718 <__mulsf3>
 430:	0e 94 c8 02 	call	0x590	; 0x590 <__fixsfsi>
 434:	dc 01       	movw	r26, r24
 436:	cb 01       	movw	r24, r22
 438:	4a e0       	ldi	r20, 0x0A	; 10
 43a:	67 e4       	ldi	r22, 0x47	; 71
 43c:	71 e0       	ldi	r23, 0x01	; 1
 43e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	values[2] = distance_sensor;
 442:	87 e4       	ldi	r24, 0x47	; 71
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_start+0x5>
 44a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
 44e:	08 95       	ret

00000450 <USART_transmit>:
	return UDR0;
}

void USART_transmit(unsigned char data)
{	// Wait for empty transmit buffer
	loop_until_bit_is_set(UCSR0A, UDRE0);
 450:	e0 ec       	ldi	r30, 0xC0	; 192
 452:	f0 e0       	ldi	r31, 0x00	; 0
 454:	90 81       	ld	r25, Z
 456:	95 ff       	sbrs	r25, 5
 458:	fd cf       	rjmp	.-6      	; 0x454 <USART_transmit+0x4>
	//puts data into buffer, sends the data
	UDR0 = data;
 45a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 45e:	08 95       	ret

00000460 <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
 464:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){       //check if there is still more chars send, this is done checking the actual char and see if it is different from the null char
 466:	88 81       	ld	r24, Y
 468:	88 23       	and	r24, r24
 46a:	31 f0       	breq	.+12     	; 0x478 <USART_putstring+0x18>
 46c:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit(*StringPtr);  // Using the simple send function we send one char at a time
 46e:	0e 94 28 02 	call	0x450	; 0x450 <USART_transmit>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){       //check if there is still more chars send, this is done checking the actual char and see if it is different from the null char
 472:	89 91       	ld	r24, Y+
 474:	81 11       	cpse	r24, r1
 476:	fb cf       	rjmp	.-10     	; 0x46e <USART_putstring+0xe>
		USART_transmit(*StringPtr);  // Using the simple send function we send one char at a time
	StringPtr++;}                    // Increment the pointer, so the next char can be read
}
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <nextLine>:

void nextLine()
{
	USART_transmit('\r');			  //Set the new line to the begin of the page
 47e:	8d e0       	ldi	r24, 0x0D	; 13
 480:	0e 94 28 02 	call	0x450	; 0x450 <USART_transmit>
	USART_transmit('\n');			  //Go to next line
 484:	8a e0       	ldi	r24, 0x0A	; 10
 486:	0e 94 28 02 	call	0x450	; 0x450 <USART_transmit>
 48a:	08 95       	ret

0000048c <read_analog>:
}

uint16_t read_analog(uint8_t value)
{
	ADMUX &= 0xF0;                      //Clear the older channel that was read
 48c:	ec e7       	ldi	r30, 0x7C	; 124
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	90 81       	ld	r25, Z
 492:	90 7f       	andi	r25, 0xF0	; 240
 494:	90 83       	st	Z, r25
	ADMUX |= value;                     //Defines the new analog channel to be read
 496:	90 81       	ld	r25, Z
 498:	89 2b       	or	r24, r25
 49a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);              //Starts a new calculation
 49c:	ea e7       	ldi	r30, 0x7A	; 122
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	80 64       	ori	r24, 0x40	; 64
 4a4:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));        //Wait until the calculation is done
 4a6:	80 81       	ld	r24, Z
 4a8:	86 fd       	sbrc	r24, 6
 4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <read_analog+0x1a>
	return ADCW;						//Returns the analog value of the selected channel
 4ac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 4b0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 4b4:	08 95       	ret

000004b6 <__subsf3>:
 4b6:	50 58       	subi	r21, 0x80	; 128

000004b8 <__addsf3>:
 4b8:	bb 27       	eor	r27, r27
 4ba:	aa 27       	eor	r26, r26
 4bc:	0e 94 73 02 	call	0x4e6	; 0x4e6 <__addsf3x>
 4c0:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_round>
 4c4:	0e 94 44 03 	call	0x688	; 0x688 <__fp_pscA>
 4c8:	38 f0       	brcs	.+14     	; 0x4d8 <__addsf3+0x20>
 4ca:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_pscB>
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <__addsf3+0x20>
 4d0:	39 f4       	brne	.+14     	; 0x4e0 <__addsf3+0x28>
 4d2:	9f 3f       	cpi	r25, 0xFF	; 255
 4d4:	19 f4       	brne	.+6      	; 0x4dc <__addsf3+0x24>
 4d6:	26 f4       	brtc	.+8      	; 0x4e0 <__addsf3+0x28>
 4d8:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_nan>
 4dc:	0e f4       	brtc	.+2      	; 0x4e0 <__addsf3+0x28>
 4de:	e0 95       	com	r30
 4e0:	e7 fb       	bst	r30, 7
 4e2:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_inf>

000004e6 <__addsf3x>:
 4e6:	e9 2f       	mov	r30, r25
 4e8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_split3>
 4ec:	58 f3       	brcs	.-42     	; 0x4c4 <__addsf3+0xc>
 4ee:	ba 17       	cp	r27, r26
 4f0:	62 07       	cpc	r22, r18
 4f2:	73 07       	cpc	r23, r19
 4f4:	84 07       	cpc	r24, r20
 4f6:	95 07       	cpc	r25, r21
 4f8:	20 f0       	brcs	.+8      	; 0x502 <__addsf3x+0x1c>
 4fa:	79 f4       	brne	.+30     	; 0x51a <__addsf3x+0x34>
 4fc:	a6 f5       	brtc	.+104    	; 0x566 <__addsf3x+0x80>
 4fe:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_zero>
 502:	0e f4       	brtc	.+2      	; 0x506 <__addsf3x+0x20>
 504:	e0 95       	com	r30
 506:	0b 2e       	mov	r0, r27
 508:	ba 2f       	mov	r27, r26
 50a:	a0 2d       	mov	r26, r0
 50c:	0b 01       	movw	r0, r22
 50e:	b9 01       	movw	r22, r18
 510:	90 01       	movw	r18, r0
 512:	0c 01       	movw	r0, r24
 514:	ca 01       	movw	r24, r20
 516:	a0 01       	movw	r20, r0
 518:	11 24       	eor	r1, r1
 51a:	ff 27       	eor	r31, r31
 51c:	59 1b       	sub	r21, r25
 51e:	99 f0       	breq	.+38     	; 0x546 <__addsf3x+0x60>
 520:	59 3f       	cpi	r21, 0xF9	; 249
 522:	50 f4       	brcc	.+20     	; 0x538 <__addsf3x+0x52>
 524:	50 3e       	cpi	r21, 0xE0	; 224
 526:	68 f1       	brcs	.+90     	; 0x582 <__addsf3x+0x9c>
 528:	1a 16       	cp	r1, r26
 52a:	f0 40       	sbci	r31, 0x00	; 0
 52c:	a2 2f       	mov	r26, r18
 52e:	23 2f       	mov	r18, r19
 530:	34 2f       	mov	r19, r20
 532:	44 27       	eor	r20, r20
 534:	58 5f       	subi	r21, 0xF8	; 248
 536:	f3 cf       	rjmp	.-26     	; 0x51e <__addsf3x+0x38>
 538:	46 95       	lsr	r20
 53a:	37 95       	ror	r19
 53c:	27 95       	ror	r18
 53e:	a7 95       	ror	r26
 540:	f0 40       	sbci	r31, 0x00	; 0
 542:	53 95       	inc	r21
 544:	c9 f7       	brne	.-14     	; 0x538 <__addsf3x+0x52>
 546:	7e f4       	brtc	.+30     	; 0x566 <__addsf3x+0x80>
 548:	1f 16       	cp	r1, r31
 54a:	ba 0b       	sbc	r27, r26
 54c:	62 0b       	sbc	r22, r18
 54e:	73 0b       	sbc	r23, r19
 550:	84 0b       	sbc	r24, r20
 552:	ba f0       	brmi	.+46     	; 0x582 <__addsf3x+0x9c>
 554:	91 50       	subi	r25, 0x01	; 1
 556:	a1 f0       	breq	.+40     	; 0x580 <__addsf3x+0x9a>
 558:	ff 0f       	add	r31, r31
 55a:	bb 1f       	adc	r27, r27
 55c:	66 1f       	adc	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	c2 f7       	brpl	.-16     	; 0x554 <__addsf3x+0x6e>
 564:	0e c0       	rjmp	.+28     	; 0x582 <__addsf3x+0x9c>
 566:	ba 0f       	add	r27, r26
 568:	62 1f       	adc	r22, r18
 56a:	73 1f       	adc	r23, r19
 56c:	84 1f       	adc	r24, r20
 56e:	48 f4       	brcc	.+18     	; 0x582 <__addsf3x+0x9c>
 570:	87 95       	ror	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b7 95       	ror	r27
 578:	f7 95       	ror	r31
 57a:	9e 3f       	cpi	r25, 0xFE	; 254
 57c:	08 f0       	brcs	.+2      	; 0x580 <__addsf3x+0x9a>
 57e:	b0 cf       	rjmp	.-160    	; 0x4e0 <__addsf3+0x28>
 580:	93 95       	inc	r25
 582:	88 0f       	add	r24, r24
 584:	08 f0       	brcs	.+2      	; 0x588 <__addsf3x+0xa2>
 586:	99 27       	eor	r25, r25
 588:	ee 0f       	add	r30, r30
 58a:	97 95       	ror	r25
 58c:	87 95       	ror	r24
 58e:	08 95       	ret

00000590 <__fixsfsi>:
 590:	0e 94 cf 02 	call	0x59e	; 0x59e <__fixunssfsi>
 594:	68 94       	set
 596:	b1 11       	cpse	r27, r1
 598:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>
 59c:	08 95       	ret

0000059e <__fixunssfsi>:
 59e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__fp_splitA>
 5a2:	88 f0       	brcs	.+34     	; 0x5c6 <__fixunssfsi+0x28>
 5a4:	9f 57       	subi	r25, 0x7F	; 127
 5a6:	98 f0       	brcs	.+38     	; 0x5ce <__fixunssfsi+0x30>
 5a8:	b9 2f       	mov	r27, r25
 5aa:	99 27       	eor	r25, r25
 5ac:	b7 51       	subi	r27, 0x17	; 23
 5ae:	b0 f0       	brcs	.+44     	; 0x5dc <__fixunssfsi+0x3e>
 5b0:	e1 f0       	breq	.+56     	; 0x5ea <__fixunssfsi+0x4c>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	1a f0       	brmi	.+6      	; 0x5c2 <__fixunssfsi+0x24>
 5bc:	ba 95       	dec	r27
 5be:	c9 f7       	brne	.-14     	; 0x5b2 <__fixunssfsi+0x14>
 5c0:	14 c0       	rjmp	.+40     	; 0x5ea <__fixunssfsi+0x4c>
 5c2:	b1 30       	cpi	r27, 0x01	; 1
 5c4:	91 f0       	breq	.+36     	; 0x5ea <__fixunssfsi+0x4c>
 5c6:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_zero>
 5ca:	b1 e0       	ldi	r27, 0x01	; 1
 5cc:	08 95       	ret
 5ce:	0c 94 85 03 	jmp	0x70a	; 0x70a <__fp_zero>
 5d2:	67 2f       	mov	r22, r23
 5d4:	78 2f       	mov	r23, r24
 5d6:	88 27       	eor	r24, r24
 5d8:	b8 5f       	subi	r27, 0xF8	; 248
 5da:	39 f0       	breq	.+14     	; 0x5ea <__fixunssfsi+0x4c>
 5dc:	b9 3f       	cpi	r27, 0xF9	; 249
 5de:	cc f3       	brlt	.-14     	; 0x5d2 <__fixunssfsi+0x34>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b3 95       	inc	r27
 5e8:	d9 f7       	brne	.-10     	; 0x5e0 <__fixunssfsi+0x42>
 5ea:	3e f4       	brtc	.+14     	; 0x5fa <__fixunssfsi+0x5c>
 5ec:	90 95       	com	r25
 5ee:	80 95       	com	r24
 5f0:	70 95       	com	r23
 5f2:	61 95       	neg	r22
 5f4:	7f 4f       	sbci	r23, 0xFF	; 255
 5f6:	8f 4f       	sbci	r24, 0xFF	; 255
 5f8:	9f 4f       	sbci	r25, 0xFF	; 255
 5fa:	08 95       	ret

000005fc <__floatunsisf>:
 5fc:	e8 94       	clt
 5fe:	09 c0       	rjmp	.+18     	; 0x612 <__floatsisf+0x12>

00000600 <__floatsisf>:
 600:	97 fb       	bst	r25, 7
 602:	3e f4       	brtc	.+14     	; 0x612 <__floatsisf+0x12>
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	99 23       	and	r25, r25
 614:	a9 f0       	breq	.+42     	; 0x640 <__floatsisf+0x40>
 616:	f9 2f       	mov	r31, r25
 618:	96 e9       	ldi	r25, 0x96	; 150
 61a:	bb 27       	eor	r27, r27
 61c:	93 95       	inc	r25
 61e:	f6 95       	lsr	r31
 620:	87 95       	ror	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b7 95       	ror	r27
 628:	f1 11       	cpse	r31, r1
 62a:	f8 cf       	rjmp	.-16     	; 0x61c <__floatsisf+0x1c>
 62c:	fa f4       	brpl	.+62     	; 0x66c <__floatsisf+0x6c>
 62e:	bb 0f       	add	r27, r27
 630:	11 f4       	brne	.+4      	; 0x636 <__floatsisf+0x36>
 632:	60 ff       	sbrs	r22, 0
 634:	1b c0       	rjmp	.+54     	; 0x66c <__floatsisf+0x6c>
 636:	6f 5f       	subi	r22, 0xFF	; 255
 638:	7f 4f       	sbci	r23, 0xFF	; 255
 63a:	8f 4f       	sbci	r24, 0xFF	; 255
 63c:	9f 4f       	sbci	r25, 0xFF	; 255
 63e:	16 c0       	rjmp	.+44     	; 0x66c <__floatsisf+0x6c>
 640:	88 23       	and	r24, r24
 642:	11 f0       	breq	.+4      	; 0x648 <__floatsisf+0x48>
 644:	96 e9       	ldi	r25, 0x96	; 150
 646:	11 c0       	rjmp	.+34     	; 0x66a <__floatsisf+0x6a>
 648:	77 23       	and	r23, r23
 64a:	21 f0       	breq	.+8      	; 0x654 <__floatsisf+0x54>
 64c:	9e e8       	ldi	r25, 0x8E	; 142
 64e:	87 2f       	mov	r24, r23
 650:	76 2f       	mov	r23, r22
 652:	05 c0       	rjmp	.+10     	; 0x65e <__floatsisf+0x5e>
 654:	66 23       	and	r22, r22
 656:	71 f0       	breq	.+28     	; 0x674 <__floatsisf+0x74>
 658:	96 e8       	ldi	r25, 0x86	; 134
 65a:	86 2f       	mov	r24, r22
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	2a f0       	brmi	.+10     	; 0x66c <__floatsisf+0x6c>
 662:	9a 95       	dec	r25
 664:	66 0f       	add	r22, r22
 666:	77 1f       	adc	r23, r23
 668:	88 1f       	adc	r24, r24
 66a:	da f7       	brpl	.-10     	; 0x662 <__floatsisf+0x62>
 66c:	88 0f       	add	r24, r24
 66e:	96 95       	lsr	r25
 670:	87 95       	ror	r24
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret

00000676 <__fp_inf>:
 676:	97 f9       	bld	r25, 7
 678:	9f 67       	ori	r25, 0x7F	; 127
 67a:	80 e8       	ldi	r24, 0x80	; 128
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	60 e0       	ldi	r22, 0x00	; 0
 680:	08 95       	ret

00000682 <__fp_nan>:
 682:	9f ef       	ldi	r25, 0xFF	; 255
 684:	80 ec       	ldi	r24, 0xC0	; 192
 686:	08 95       	ret

00000688 <__fp_pscA>:
 688:	00 24       	eor	r0, r0
 68a:	0a 94       	dec	r0
 68c:	16 16       	cp	r1, r22
 68e:	17 06       	cpc	r1, r23
 690:	18 06       	cpc	r1, r24
 692:	09 06       	cpc	r0, r25
 694:	08 95       	ret

00000696 <__fp_pscB>:
 696:	00 24       	eor	r0, r0
 698:	0a 94       	dec	r0
 69a:	12 16       	cp	r1, r18
 69c:	13 06       	cpc	r1, r19
 69e:	14 06       	cpc	r1, r20
 6a0:	05 06       	cpc	r0, r21
 6a2:	08 95       	ret

000006a4 <__fp_round>:
 6a4:	09 2e       	mov	r0, r25
 6a6:	03 94       	inc	r0
 6a8:	00 0c       	add	r0, r0
 6aa:	11 f4       	brne	.+4      	; 0x6b0 <__fp_round+0xc>
 6ac:	88 23       	and	r24, r24
 6ae:	52 f0       	brmi	.+20     	; 0x6c4 <__fp_round+0x20>
 6b0:	bb 0f       	add	r27, r27
 6b2:	40 f4       	brcc	.+16     	; 0x6c4 <__fp_round+0x20>
 6b4:	bf 2b       	or	r27, r31
 6b6:	11 f4       	brne	.+4      	; 0x6bc <__fp_round+0x18>
 6b8:	60 ff       	sbrs	r22, 0
 6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <__fp_round+0x20>
 6bc:	6f 5f       	subi	r22, 0xFF	; 255
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	08 95       	ret

000006c6 <__fp_split3>:
 6c6:	57 fd       	sbrc	r21, 7
 6c8:	90 58       	subi	r25, 0x80	; 128
 6ca:	44 0f       	add	r20, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	59 f0       	breq	.+22     	; 0x6e6 <__fp_splitA+0x10>
 6d0:	5f 3f       	cpi	r21, 0xFF	; 255
 6d2:	71 f0       	breq	.+28     	; 0x6f0 <__fp_splitA+0x1a>
 6d4:	47 95       	ror	r20

000006d6 <__fp_splitA>:
 6d6:	88 0f       	add	r24, r24
 6d8:	97 fb       	bst	r25, 7
 6da:	99 1f       	adc	r25, r25
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <__fp_splitA+0x20>
 6de:	9f 3f       	cpi	r25, 0xFF	; 255
 6e0:	79 f0       	breq	.+30     	; 0x700 <__fp_splitA+0x2a>
 6e2:	87 95       	ror	r24
 6e4:	08 95       	ret
 6e6:	12 16       	cp	r1, r18
 6e8:	13 06       	cpc	r1, r19
 6ea:	14 06       	cpc	r1, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	f2 cf       	rjmp	.-28     	; 0x6d4 <__fp_split3+0xe>
 6f0:	46 95       	lsr	r20
 6f2:	f1 df       	rcall	.-30     	; 0x6d6 <__fp_splitA>
 6f4:	08 c0       	rjmp	.+16     	; 0x706 <__fp_splitA+0x30>
 6f6:	16 16       	cp	r1, r22
 6f8:	17 06       	cpc	r1, r23
 6fa:	18 06       	cpc	r1, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	f1 cf       	rjmp	.-30     	; 0x6e2 <__fp_splitA+0xc>
 700:	86 95       	lsr	r24
 702:	71 05       	cpc	r23, r1
 704:	61 05       	cpc	r22, r1
 706:	08 94       	sec
 708:	08 95       	ret

0000070a <__fp_zero>:
 70a:	e8 94       	clt

0000070c <__fp_szero>:
 70c:	bb 27       	eor	r27, r27
 70e:	66 27       	eor	r22, r22
 710:	77 27       	eor	r23, r23
 712:	cb 01       	movw	r24, r22
 714:	97 f9       	bld	r25, 7
 716:	08 95       	ret

00000718 <__mulsf3>:
 718:	0e 94 9f 03 	call	0x73e	; 0x73e <__mulsf3x>
 71c:	0c 94 52 03 	jmp	0x6a4	; 0x6a4 <__fp_round>
 720:	0e 94 44 03 	call	0x688	; 0x688 <__fp_pscA>
 724:	38 f0       	brcs	.+14     	; 0x734 <__mulsf3+0x1c>
 726:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_pscB>
 72a:	20 f0       	brcs	.+8      	; 0x734 <__mulsf3+0x1c>
 72c:	95 23       	and	r25, r21
 72e:	11 f0       	breq	.+4      	; 0x734 <__mulsf3+0x1c>
 730:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_inf>
 734:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_nan>
 738:	11 24       	eor	r1, r1
 73a:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>

0000073e <__mulsf3x>:
 73e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_split3>
 742:	70 f3       	brcs	.-36     	; 0x720 <__mulsf3+0x8>

00000744 <__mulsf3_pse>:
 744:	95 9f       	mul	r25, r21
 746:	c1 f3       	breq	.-16     	; 0x738 <__mulsf3+0x20>
 748:	95 0f       	add	r25, r21
 74a:	50 e0       	ldi	r21, 0x00	; 0
 74c:	55 1f       	adc	r21, r21
 74e:	62 9f       	mul	r22, r18
 750:	f0 01       	movw	r30, r0
 752:	72 9f       	mul	r23, r18
 754:	bb 27       	eor	r27, r27
 756:	f0 0d       	add	r31, r0
 758:	b1 1d       	adc	r27, r1
 75a:	63 9f       	mul	r22, r19
 75c:	aa 27       	eor	r26, r26
 75e:	f0 0d       	add	r31, r0
 760:	b1 1d       	adc	r27, r1
 762:	aa 1f       	adc	r26, r26
 764:	64 9f       	mul	r22, r20
 766:	66 27       	eor	r22, r22
 768:	b0 0d       	add	r27, r0
 76a:	a1 1d       	adc	r26, r1
 76c:	66 1f       	adc	r22, r22
 76e:	82 9f       	mul	r24, r18
 770:	22 27       	eor	r18, r18
 772:	b0 0d       	add	r27, r0
 774:	a1 1d       	adc	r26, r1
 776:	62 1f       	adc	r22, r18
 778:	73 9f       	mul	r23, r19
 77a:	b0 0d       	add	r27, r0
 77c:	a1 1d       	adc	r26, r1
 77e:	62 1f       	adc	r22, r18
 780:	83 9f       	mul	r24, r19
 782:	a0 0d       	add	r26, r0
 784:	61 1d       	adc	r22, r1
 786:	22 1f       	adc	r18, r18
 788:	74 9f       	mul	r23, r20
 78a:	33 27       	eor	r19, r19
 78c:	a0 0d       	add	r26, r0
 78e:	61 1d       	adc	r22, r1
 790:	23 1f       	adc	r18, r19
 792:	84 9f       	mul	r24, r20
 794:	60 0d       	add	r22, r0
 796:	21 1d       	adc	r18, r1
 798:	82 2f       	mov	r24, r18
 79a:	76 2f       	mov	r23, r22
 79c:	6a 2f       	mov	r22, r26
 79e:	11 24       	eor	r1, r1
 7a0:	9f 57       	subi	r25, 0x7F	; 127
 7a2:	50 40       	sbci	r21, 0x00	; 0
 7a4:	9a f0       	brmi	.+38     	; 0x7cc <__mulsf3_pse+0x88>
 7a6:	f1 f0       	breq	.+60     	; 0x7e4 <__mulsf3_pse+0xa0>
 7a8:	88 23       	and	r24, r24
 7aa:	4a f0       	brmi	.+18     	; 0x7be <__mulsf3_pse+0x7a>
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	bb 1f       	adc	r27, r27
 7b2:	66 1f       	adc	r22, r22
 7b4:	77 1f       	adc	r23, r23
 7b6:	88 1f       	adc	r24, r24
 7b8:	91 50       	subi	r25, 0x01	; 1
 7ba:	50 40       	sbci	r21, 0x00	; 0
 7bc:	a9 f7       	brne	.-22     	; 0x7a8 <__mulsf3_pse+0x64>
 7be:	9e 3f       	cpi	r25, 0xFE	; 254
 7c0:	51 05       	cpc	r21, r1
 7c2:	80 f0       	brcs	.+32     	; 0x7e4 <__mulsf3_pse+0xa0>
 7c4:	0c 94 3b 03 	jmp	0x676	; 0x676 <__fp_inf>
 7c8:	0c 94 86 03 	jmp	0x70c	; 0x70c <__fp_szero>
 7cc:	5f 3f       	cpi	r21, 0xFF	; 255
 7ce:	e4 f3       	brlt	.-8      	; 0x7c8 <__mulsf3_pse+0x84>
 7d0:	98 3e       	cpi	r25, 0xE8	; 232
 7d2:	d4 f3       	brlt	.-12     	; 0x7c8 <__mulsf3_pse+0x84>
 7d4:	86 95       	lsr	r24
 7d6:	77 95       	ror	r23
 7d8:	67 95       	ror	r22
 7da:	b7 95       	ror	r27
 7dc:	f7 95       	ror	r31
 7de:	e7 95       	ror	r30
 7e0:	9f 5f       	subi	r25, 0xFF	; 255
 7e2:	c1 f7       	brne	.-16     	; 0x7d4 <__mulsf3_pse+0x90>
 7e4:	fe 2b       	or	r31, r30
 7e6:	88 0f       	add	r24, r24
 7e8:	91 1d       	adc	r25, r1
 7ea:	96 95       	lsr	r25
 7ec:	87 95       	ror	r24
 7ee:	97 f9       	bld	r25, 7
 7f0:	08 95       	ret

000007f2 <__itoa_ncheck>:
 7f2:	bb 27       	eor	r27, r27
 7f4:	4a 30       	cpi	r20, 0x0A	; 10
 7f6:	31 f4       	brne	.+12     	; 0x804 <__itoa_ncheck+0x12>
 7f8:	99 23       	and	r25, r25
 7fa:	22 f4       	brpl	.+8      	; 0x804 <__itoa_ncheck+0x12>
 7fc:	bd e2       	ldi	r27, 0x2D	; 45
 7fe:	90 95       	com	r25
 800:	81 95       	neg	r24
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	0c 94 05 04 	jmp	0x80a	; 0x80a <__utoa_common>

00000808 <__utoa_ncheck>:
 808:	bb 27       	eor	r27, r27

0000080a <__utoa_common>:
 80a:	fb 01       	movw	r30, r22
 80c:	55 27       	eor	r21, r21
 80e:	aa 27       	eor	r26, r26
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	aa 1f       	adc	r26, r26
 816:	a4 17       	cp	r26, r20
 818:	10 f0       	brcs	.+4      	; 0x81e <__utoa_common+0x14>
 81a:	a4 1b       	sub	r26, r20
 81c:	83 95       	inc	r24
 81e:	50 51       	subi	r21, 0x10	; 16
 820:	b9 f7       	brne	.-18     	; 0x810 <__utoa_common+0x6>
 822:	a0 5d       	subi	r26, 0xD0	; 208
 824:	aa 33       	cpi	r26, 0x3A	; 58
 826:	08 f0       	brcs	.+2      	; 0x82a <__utoa_common+0x20>
 828:	a9 5d       	subi	r26, 0xD9	; 217
 82a:	a1 93       	st	Z+, r26
 82c:	00 97       	sbiw	r24, 0x00	; 0
 82e:	79 f7       	brne	.-34     	; 0x80e <__utoa_common+0x4>
 830:	b1 11       	cpse	r27, r1
 832:	b1 93       	st	Z+, r27
 834:	11 92       	st	Z+, r1
 836:	cb 01       	movw	r24, r22
 838:	0c 94 1e 04 	jmp	0x83c	; 0x83c <strrev>

0000083c <strrev>:
 83c:	dc 01       	movw	r26, r24
 83e:	fc 01       	movw	r30, r24
 840:	67 2f       	mov	r22, r23
 842:	71 91       	ld	r23, Z+
 844:	77 23       	and	r23, r23
 846:	e1 f7       	brne	.-8      	; 0x840 <strrev+0x4>
 848:	32 97       	sbiw	r30, 0x02	; 2
 84a:	04 c0       	rjmp	.+8      	; 0x854 <strrev+0x18>
 84c:	7c 91       	ld	r23, X
 84e:	6d 93       	st	X+, r22
 850:	70 83       	st	Z, r23
 852:	62 91       	ld	r22, -Z
 854:	ae 17       	cp	r26, r30
 856:	bf 07       	cpc	r27, r31
 858:	c8 f3       	brcs	.-14     	; 0x84c <strrev+0x10>
 85a:	08 95       	ret

0000085c <_exit>:
 85c:	f8 94       	cli

0000085e <__stop_program>:
 85e:	ff cf       	rjmp	.-2      	; 0x85e <__stop_program>
