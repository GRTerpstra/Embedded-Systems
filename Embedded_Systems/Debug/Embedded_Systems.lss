
Embedded_Systems.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000a0e  00000aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00800122  00800122  00000ac4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001687  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d18  00000000  00000000  0000231b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd4  00000000  00000000  00003033  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b9  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000714  00000000  00000000  00004571  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004c85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 35       	cpi	r26, 0x5D	; 93
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 01 	call	0x3de	; 0x3de <main>
  9e:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.            
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
  b4:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e2 e2       	ldi	r30, 0x22	; 34
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?   
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
 
-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;  
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ee 5d       	subi	r30, 0xDE	; 222
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ee 5d       	subi	r30, 0xDE	; 222
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c2 e2       	ldi	r28, 0x22	; 34
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.  

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 
-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e2 e2       	ldi	r30, 0x22	; 34
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	25 e4       	ldi	r18, 0x45	; 69
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <upDownAwning>:
int distance_awning_up = 40;						// Distance at which the awning opens
int distance_awning_down = 5;						// Distance at which the awning closes


void upDownAwning()
{
 218:	0f 93       	push	r16
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
	int sensor_light = atoi(light_sensor);					// Convert light sensor value to int and set ls
 220:	87 e4       	ldi	r24, 0x47	; 71
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 aa 04 	call	0x954	; 0x954 <atoi>
 228:	ec 01       	movw	r28, r24
	int sensor_temperature = atoi(temperature_sensor);				// Convert temperature sensor value to int and set ts
 22a:	8c e4       	ldi	r24, 0x4C	; 76
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 aa 04 	call	0x954	; 0x954 <atoi>
 232:	8c 01       	movw	r16, r24
	distanceStill();								// Get distance
 234:	0e 94 ad 02 	call	0x55a	; 0x55a <distanceStill>
	int sensor_distance = atoi(distance_sensor);					// Convert distance sensor value to int
 238:	83 e5       	ldi	r24, 0x53	; 83
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 aa 04 	call	0x954	; 0x954 <atoi>
	
	
	if(sensor_light >= light_awning_down || sensor_temperature >= temperature_awning_down)
 240:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <light_awning_down>
 244:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <light_awning_down+0x1>
 248:	c2 17       	cp	r28, r18
 24a:	d3 07       	cpc	r29, r19
 24c:	3c f4       	brge	.+14     	; 0x25c <upDownAwning+0x44>
 24e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <temperature_awning_down>
 252:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <temperature_awning_down+0x1>
 256:	02 17       	cp	r16, r18
 258:	13 07       	cpc	r17, r19
 25a:	fc f0       	brlt	.+62     	; 0x29a <upDownAwning+0x82>
	{
		PORTB &= ~(1 << PB5);						// Green LED off
 25c:	2d 98       	cbi	0x05, 5	; 5
		PORTB |= (1 << PB3);						// Red LED on
 25e:	2b 9a       	sbi	0x05, 3	; 5
		
		
		if (sensor_distance > distance_awning_down)						// Makes yellow LED blink
 260:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 264:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 268:	28 17       	cp	r18, r24
 26a:	39 07       	cpc	r19, r25
 26c:	0c f0       	brlt	.+2      	; 0x270 <upDownAwning+0x58>
 26e:	40 c0       	rjmp	.+128    	; 0x2f0 <upDownAwning+0xd8>
		{
			PORTB |= (1 << PB4);
 270:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	81 ee       	ldi	r24, 0xE1	; 225
 276:	94 e0       	ldi	r25, 0x04	; 4
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <upDownAwning+0x60>
 280:	00 c0       	rjmp	.+0      	; 0x282 <upDownAwning+0x6a>
 282:	00 00       	nop
			_delay_ms(100);
			PORTB &= ~(1 << PB4);
 284:	2c 98       	cbi	0x05, 4	; 5
 286:	2f ef       	ldi	r18, 0xFF	; 255
 288:	81 ee       	ldi	r24, 0xE1	; 225
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	21 50       	subi	r18, 0x01	; 1
 28e:	80 40       	sbci	r24, 0x00	; 0
 290:	90 40       	sbci	r25, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <upDownAwning+0x74>
 294:	00 c0       	rjmp	.+0      	; 0x296 <upDownAwning+0x7e>
 296:	00 00       	nop
 298:	2b c0       	rjmp	.+86     	; 0x2f0 <upDownAwning+0xd8>
			_delay_ms(100);
		}
	}
	else if(sensor_light <= light_awning_up || sensor_temperature <= temperature_awning_up )			
 29a:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <light_awning_up>
 29e:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <light_awning_up+0x1>
 2a2:	2c 17       	cp	r18, r28
 2a4:	3d 07       	cpc	r19, r29
 2a6:	3c f4       	brge	.+14     	; 0x2b6 <upDownAwning+0x9e>
 2a8:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <temperature_awning_up>
 2ac:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <temperature_awning_up+0x1>
 2b0:	20 17       	cp	r18, r16
 2b2:	31 07       	cpc	r19, r17
 2b4:	ec f0       	brlt	.+58     	; 0x2f0 <upDownAwning+0xd8>
	{
		PORTB &= ~(1 << PB3);						
 2b6:	2b 98       	cbi	0x05, 3	; 5
		PORTB |= (1 << PB5);						
 2b8:	2d 9a       	sbi	0x05, 5	; 5
		
		
		if (sensor_distance < distance_awning_up)						
 2ba:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <distance_awning_up>
 2be:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <distance_awning_up+0x1>
 2c2:	82 17       	cp	r24, r18
 2c4:	93 07       	cpc	r25, r19
 2c6:	a4 f4       	brge	.+40     	; 0x2f0 <upDownAwning+0xd8>
		{
			PORTB |= (1 << PB4);
 2c8:	2c 9a       	sbi	0x05, 4	; 5
 2ca:	2f ef       	ldi	r18, 0xFF	; 255
 2cc:	81 ee       	ldi	r24, 0xE1	; 225
 2ce:	94 e0       	ldi	r25, 0x04	; 4
 2d0:	21 50       	subi	r18, 0x01	; 1
 2d2:	80 40       	sbci	r24, 0x00	; 0
 2d4:	90 40       	sbci	r25, 0x00	; 0
 2d6:	e1 f7       	brne	.-8      	; 0x2d0 <upDownAwning+0xb8>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <upDownAwning+0xc2>
 2da:	00 00       	nop
			_delay_ms(100);
			PORTB &= ~(1 << PB4);
 2dc:	2c 98       	cbi	0x05, 4	; 5
 2de:	2f ef       	ldi	r18, 0xFF	; 255
 2e0:	81 ee       	ldi	r24, 0xE1	; 225
 2e2:	94 e0       	ldi	r25, 0x04	; 4
 2e4:	21 50       	subi	r18, 0x01	; 1
 2e6:	80 40       	sbci	r24, 0x00	; 0
 2e8:	90 40       	sbci	r25, 0x00	; 0
 2ea:	e1 f7       	brne	.-8      	; 0x2e4 <upDownAwning+0xcc>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <upDownAwning+0xd6>
 2ee:	00 00       	nop
			_delay_ms(100);
		}
	}
	
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	1f 91       	pop	r17
 2f6:	0f 91       	pop	r16
 2f8:	08 95       	ret

000002fa <init_serial_connectie>:
#define BAUDRATE 19200					// set the baudrate
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)

void init_serial_connectie()
{
	UCSR0A = 0;							// disable U2X mode
 2fa:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);	// Set frame format: 8data, 2stop bit
 2fe:	8e e0       	ldi	r24, 0x0E	; 14
 300:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 304:	08 95       	ret

00000306 <init_USART>:
}

void init_USART()
{
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
 306:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
 30a:	83 e3       	ldi	r24, 0x33	; 51
 30c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);		// Enable receiver and transmitter
 310:	e1 ec       	ldi	r30, 0xC1	; 193
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	88 e1       	ldi	r24, 0x18	; 24
 316:	80 83       	st	Z, r24
	UCSR0C = (3<<UCSZ00);
 318:	86 e0       	ldi	r24, 0x06	; 6
 31a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	UCSR0B |= (1 << RXCIE0 );			
 31e:	80 81       	ld	r24, Z
 320:	80 68       	ori	r24, 0x80	; 128
 322:	80 83       	st	Z, r24
 324:	08 95       	ret

00000326 <init_ttc_scheduler>:
								
}

void init_ttc_scheduler()
{
	SCH_Init_T1();					//Set up scheduler
 326:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(temperature,1,100); //Add 'temperature' task
 32a:	44 e6       	ldi	r20, 0x64	; 100
 32c:	50 e0       	ldi	r21, 0x00	; 0
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	89 e1       	ldi	r24, 0x19	; 25
 334:	92 e0       	ldi	r25, 0x02	; 2
 336:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(light,2,100);		//Add 'light' task
 33a:	44 e6       	ldi	r20, 0x64	; 100
 33c:	50 e0       	ldi	r21, 0x00	; 0
 33e:	62 e0       	ldi	r22, 0x02	; 2
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	8d e4       	ldi	r24, 0x4D	; 77
 344:	92 e0       	ldi	r25, 0x02	; 2
 346:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(distance,3,100);	//Add 'distance' task
 34a:	44 e6       	ldi	r20, 0x64	; 100
 34c:	50 e0       	ldi	r21, 0x00	; 0
 34e:	63 e0       	ldi	r22, 0x03	; 3
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	8b e7       	ldi	r24, 0x7B	; 123
 354:	92 e0       	ldi	r25, 0x02	; 2
 356:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(putString,4,50);	//Add 'putString' task
 35a:	42 e3       	ldi	r20, 0x32	; 50
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	64 e0       	ldi	r22, 0x04	; 4
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	84 ef       	ldi	r24, 0xF4	; 244
 364:	91 e0       	ldi	r25, 0x01	; 1
 366:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(upDownAwning,0,25);//Add 'updown' task
 36a:	49 e1       	ldi	r20, 0x19	; 25
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	70 e0       	ldi	r23, 0x00	; 0
 372:	8c e0       	ldi	r24, 0x0C	; 12
 374:	91 e0       	ldi	r25, 0x01	; 1
 376:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Start();					//Start running the scheduler 
 37a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
 37e:	08 95       	ret

00000380 <init_analog>:
}

void init_analog()
{
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));    // 16Mhz/128 = 125Khz the ADC reference clock
 380:	ea e7       	ldi	r30, 0x7A	; 122
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	87 60       	ori	r24, 0x07	; 7
 388:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							 // Voltage reference from AVCC (5v)
 38a:	ac e7       	ldi	r26, 0x7C	; 124
 38c:	b0 e0       	ldi	r27, 0x00	; 0
 38e:	8c 91       	ld	r24, X
 390:	80 64       	ori	r24, 0x40	; 64
 392:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							 // Turn on ADC
 394:	80 81       	ld	r24, Z
 396:	80 68       	ori	r24, 0x80	; 128
 398:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							 // Do an initial conversion because this one is the slowest and to ensure that everything is up and running
 39a:	80 81       	ld	r24, Z
 39c:	80 64       	ori	r24, 0x40	; 64
 39e:	80 83       	st	Z, r24
 3a0:	08 95       	ret

000003a2 <init_distance>:
}

void init_distance()
{
	DDRD |= (1<< PD7);			// Pin 3 Trigger Output
 3a2:	57 9a       	sbi	0x0a, 7	; 10
	DDRD &= ~(1 << PD6);		// Pin 2 Echo Input
 3a4:	56 98       	cbi	0x0a, 6	; 10
 3a6:	08 95       	ret

000003a8 <init_LEDS>:
}

void init_LEDS()
{
	DDRB |= (1 <<PB3);			// pin0 B = output
 3a8:	23 9a       	sbi	0x04, 3	; 4
	DDRB |= (1 << PB4);			// pin1 B = output
 3aa:	24 9a       	sbi	0x04, 4	; 4
	DDRB |= (1 << PB5);			// pin2 B = output
 3ac:	25 9a       	sbi	0x04, 5	; 4
	PORTB |= (1 << PB5);		// Green LED on
 3ae:	2d 9a       	sbi	0x05, 5	; 5
 3b0:	08 95       	ret

000003b2 <setup>:
#include "init.h"


void setup()
{
	init_serial_connectie();
 3b2:	0e 94 7d 01 	call	0x2fa	; 0x2fa <init_serial_connectie>
	init_analog();				// Setup the ADC
 3b6:	0e 94 c0 01 	call	0x380	; 0x380 <init_analog>
	init_USART();				// Setup the USART
 3ba:	0e 94 83 01 	call	0x306	; 0x306 <init_USART>
	init_distance();			// Setup distance sensor
 3be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init_distance>
	init_ttc_scheduler();		// Setup scheduler
 3c2:	0e 94 93 01 	call	0x326	; 0x326 <init_ttc_scheduler>
	init_LEDS();				// Setup LED
 3c6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <init_LEDS>
 3ca:	2f ef       	ldi	r18, 0xFF	; 255
 3cc:	81 ee       	ldi	r24, 0xE1	; 225
 3ce:	94 e0       	ldi	r25, 0x04	; 4
 3d0:	21 50       	subi	r18, 0x01	; 1
 3d2:	80 40       	sbci	r24, 0x00	; 0
 3d4:	90 40       	sbci	r25, 0x00	; 0
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <setup+0x1e>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <setup+0x28>
 3da:	00 00       	nop
 3dc:	08 95       	ret

000003de <main>:
	_delay_ms(100);				// Half second delay to initialize everything
}

int main(void)
{
	setup();
 3de:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <setup>
	while(1) {
		SCH_Dispatch_Tasks();
 3e2:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 3e6:	fd cf       	rjmp	.-6      	; 0x3e2 <main+0x4>

000003e8 <putString>:
#include "sensors.h"
#include "serial.h"

char *values[] = {"0","0","0"};

void putString(){
 3e8:	cf 93       	push	r28
 3ea:	df 93       	push	r29
	
	USART_putstring("{t:");
 3ec:	82 e1       	ldi	r24, 0x12	; 18
 3ee:	91 e0       	ldi	r25, 0x01	; 1
 3f0:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <USART_putstring>
	USART_putstring(values[0]);
 3f4:	cc e0       	ldi	r28, 0x0C	; 12
 3f6:	d1 e0       	ldi	r29, 0x01	; 1
 3f8:	88 81       	ld	r24, Y
 3fa:	99 81       	ldd	r25, Y+1	; 0x01
 3fc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <USART_putstring>
	USART_putstring(",l:");
 400:	86 e1       	ldi	r24, 0x16	; 22
 402:	91 e0       	ldi	r25, 0x01	; 1
 404:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <USART_putstring>
	USART_putstring(values[1]);
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	9b 81       	ldd	r25, Y+3	; 0x03
 40c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <USART_putstring>
	USART_putstring(",d:");
 410:	8a e1       	ldi	r24, 0x1A	; 26
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <USART_putstring>
	USART_putstring(values[2]);
 418:	8c 81       	ldd	r24, Y+4	; 0x04
 41a:	9d 81       	ldd	r25, Y+5	; 0x05
 41c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <USART_putstring>
	USART_putstring("}");
 420:	8e e1       	ldi	r24, 0x1E	; 30
 422:	91 e0       	ldi	r25, 0x01	; 1
 424:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <USART_putstring>
	
	nextLine();
 428:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <nextLine>
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <temperature>:

void temperature()
{
	analog_value = read_analog(0);
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 f7 02 	call	0x5ee	; 0x5ee <read_analog>
	analog_value = (((((double)analog_value / 1024) * 5) - 0.5) * 100);		 // Calculate temperature
 438:	bc 01       	movw	r22, r24
 43a:	80 e0       	ldi	r24, 0x00	; 0
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 af 03 	call	0x75e	; 0x75e <__floatunsisf>
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	30 e0       	ldi	r19, 0x00	; 0
 446:	40 e8       	ldi	r20, 0x80	; 128
 448:	5a e3       	ldi	r21, 0x3A	; 58
 44a:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 ea       	ldi	r20, 0xA0	; 160
 454:	50 e4       	ldi	r21, 0x40	; 64
 456:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	40 e0       	ldi	r20, 0x00	; 0
 460:	5f e3       	ldi	r21, 0x3F	; 63
 462:	0e 94 0c 03 	call	0x618	; 0x618 <__subsf3>
 466:	20 e0       	ldi	r18, 0x00	; 0
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	48 ec       	ldi	r20, 0xC8	; 200
 46c:	52 e4       	ldi	r21, 0x42	; 66
 46e:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 472:	0e 94 80 03 	call	0x700	; 0x700 <__fixunssfsi>
 476:	dc 01       	movw	r26, r24
 478:	cb 01       	movw	r24, r22
 47a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <analog_value+0x1>
 47e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <analog_value>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 482:	4a e0       	ldi	r20, 0x0A	; 10
 484:	6c e4       	ldi	r22, 0x4C	; 76
 486:	71 e0       	ldi	r23, 0x01	; 1
 488:	0e 94 c8 04 	call	0x990	; 0x990 <__itoa_ncheck>
	itoa(analog_value, temperature_sensor, 10);								//  Convert the read value to an ascii string
	values[0] = temperature_sensor;
 48c:	8c e4       	ldi	r24, 0x4C	; 76
 48e:	91 e0       	ldi	r25, 0x01	; 1
 490:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <values+0x1>
 494:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <values>
 498:	08 95       	ret

0000049a <light>:
}

void light()
{
	analog_value = read_analog(1);
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <read_analog>
	analog_value = ((((double)analog_value)/1024)*100 *1.5);			  // Calculate the amount of light
 4a0:	bc 01       	movw	r22, r24
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 af 03 	call	0x75e	; 0x75e <__floatunsisf>
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	40 e8       	ldi	r20, 0x80	; 128
 4b0:	5a e3       	ldi	r21, 0x3A	; 58
 4b2:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	48 ec       	ldi	r20, 0xC8	; 200
 4bc:	52 e4       	ldi	r21, 0x42	; 66
 4be:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	30 e0       	ldi	r19, 0x00	; 0
 4c6:	40 ec       	ldi	r20, 0xC0	; 192
 4c8:	5f e3       	ldi	r21, 0x3F	; 63
 4ca:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 4ce:	0e 94 80 03 	call	0x700	; 0x700 <__fixunssfsi>
 4d2:	dc 01       	movw	r26, r24
 4d4:	cb 01       	movw	r24, r22
 4d6:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <analog_value+0x1>
 4da:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <analog_value>
 4de:	4a e0       	ldi	r20, 0x0A	; 10
 4e0:	67 e4       	ldi	r22, 0x47	; 71
 4e2:	71 e0       	ldi	r23, 0x01	; 1
 4e4:	0e 94 c8 04 	call	0x990	; 0x990 <__itoa_ncheck>
	itoa(analog_value, light_sensor, 10);							  // Convert the read value to an ascii string
	values[1] = light_sensor;											// Send value to the terminal
 4e8:	87 e4       	ldi	r24, 0x47	; 71
 4ea:	91 e0       	ldi	r25, 0x01	; 1
 4ec:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <values+0x3>
 4f0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <values+0x2>
 4f4:	08 95       	ret

000004f6 <distance>:
}

void distance()
{
	OCR1A = 0x640;								
 4f6:	80 e4       	ldi	r24, 0x40	; 64
 4f8:	96 e0       	ldi	r25, 0x06	; 6
 4fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 4fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	PORTD |= (1<< PD7);
 502:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 504:	85 e3       	ldi	r24, 0x35	; 53
 506:	8a 95       	dec	r24
 508:	f1 f7       	brne	.-4      	; 0x506 <distance+0x10>
 50a:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1 << PD7);							// Give pulse from 10us]]200000000000
 50c:	5f 98       	cbi	0x0b, 7	; 11
	loop_until_bit_is_set(PIND, PD6);
 50e:	4e 9b       	sbis	0x09, 6	; 9
 510:	fe cf       	rjmp	.-4      	; 0x50e <distance+0x18>
	TCNT1 = 0;
 512:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 516:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	loop_until_bit_is_clear(PIND, PD6);
 51a:	4e 99       	sbic	0x09, 6	; 9
 51c:	fe cf       	rjmp	.-4      	; 0x51a <distance+0x24>
	uint16_t count = TCNT1;
 51e:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 522:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 af 03 	call	0x75e	; 0x75e <__floatunsisf>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e8       	ldi	r20, 0x80	; 128
 534:	5e e3       	ldi	r21, 0x3E	; 62
 536:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 53a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
 53e:	dc 01       	movw	r26, r24
 540:	cb 01       	movw	r24, r22
 542:	4a e0       	ldi	r20, 0x0A	; 10
 544:	63 e5       	ldi	r22, 0x53	; 83
 546:	71 e0       	ldi	r23, 0x01	; 1
 548:	0e 94 c8 04 	call	0x990	; 0x990 <__itoa_ncheck>
	float distance = ((float)count / 4);		// Calculate the distance

	itoa(distance, distance_sensor, 10);        // Convert the read value to an ascii string
	values[2] = distance_sensor;
 54c:	83 e5       	ldi	r24, 0x53	; 83
 54e:	91 e0       	ldi	r25, 0x01	; 1
 550:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <values+0x5>
 554:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <values+0x4>
 558:	08 95       	ret

0000055a <distanceStill>:

}

void distanceStill()
{
	OCR1A = 0x640;								
 55a:	80 e4       	ldi	r24, 0x40	; 64
 55c:	96 e0       	ldi	r25, 0x06	; 6
 55e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 562:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	PORTD |= (1 << PD7);
 566:	5f 9a       	sbi	0x0b, 7	; 11
 568:	85 e3       	ldi	r24, 0x35	; 53
 56a:	8a 95       	dec	r24
 56c:	f1 f7       	brne	.-4      	; 0x56a <distanceStill+0x10>
 56e:	00 00       	nop
	_delay_us(10);
	PORTD &= ~(1<< PD7);							
 570:	5f 98       	cbi	0x0b, 7	; 11
	loop_until_bit_is_set(PIND, PD6);
 572:	4e 9b       	sbis	0x09, 6	; 9
 574:	fe cf       	rjmp	.-4      	; 0x572 <distanceStill+0x18>
	TCNT1 = 0;
 576:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 57a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	loop_until_bit_is_clear(PIND, PD6);
 57e:	4e 99       	sbic	0x09, 6	; 9
 580:	fe cf       	rjmp	.-4      	; 0x57e <distanceStill+0x24>
	uint16_t count = TCNT1;
 582:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 586:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 58a:	80 e0       	ldi	r24, 0x00	; 0
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 af 03 	call	0x75e	; 0x75e <__floatunsisf>
 592:	20 e0       	ldi	r18, 0x00	; 0
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	40 e8       	ldi	r20, 0x80	; 128
 598:	5e e3       	ldi	r21, 0x3E	; 62
 59a:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulsf3>
 59e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
 5a2:	dc 01       	movw	r26, r24
 5a4:	cb 01       	movw	r24, r22
 5a6:	4a e0       	ldi	r20, 0x0A	; 10
 5a8:	63 e5       	ldi	r22, 0x53	; 83
 5aa:	71 e0       	ldi	r23, 0x01	; 1
 5ac:	0e 94 c8 04 	call	0x990	; 0x990 <__itoa_ncheck>
 5b0:	08 95       	ret

000005b2 <USART_transmit>:
	return UDR0;
}

void USART_transmit(unsigned char data)
{	// Wait for empty transmit buffer
	loop_until_bit_is_set(UCSR0A, UDRE0);
 5b2:	e0 ec       	ldi	r30, 0xC0	; 192
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	90 81       	ld	r25, Z
 5b8:	95 ff       	sbrs	r25, 5
 5ba:	fd cf       	rjmp	.-6      	; 0x5b6 <USART_transmit+0x4>
	//puts data into buffer, sends the data
	UDR0 = data;
 5bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 5c0:	08 95       	ret

000005c2 <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00){       //check if there is still more chars send, this is done checking the actual char and see if it is different from the null char
 5c8:	88 81       	ld	r24, Y
 5ca:	88 23       	and	r24, r24
 5cc:	31 f0       	breq	.+12     	; 0x5da <USART_putstring+0x18>
 5ce:	21 96       	adiw	r28, 0x01	; 1
		USART_transmit(*StringPtr);  // Using the simple send function we send one char at a time
 5d0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <USART_transmit>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00){       //check if there is still more chars send, this is done checking the actual char and see if it is different from the null char
 5d4:	89 91       	ld	r24, Y+
 5d6:	81 11       	cpse	r24, r1
 5d8:	fb cf       	rjmp	.-10     	; 0x5d0 <USART_putstring+0xe>
		USART_transmit(*StringPtr);  // Using the simple send function we send one char at a time
	StringPtr++;}                    // Increment the pointer, so the next char can be read
}
 5da:	df 91       	pop	r29
 5dc:	cf 91       	pop	r28
 5de:	08 95       	ret

000005e0 <nextLine>:

void nextLine()
{
	USART_transmit('\r');			  //Set the new line to the begin of the page
 5e0:	8d e0       	ldi	r24, 0x0D	; 13
 5e2:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <USART_transmit>
	USART_transmit('\n');			  //Go to next line
 5e6:	8a e0       	ldi	r24, 0x0A	; 10
 5e8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <USART_transmit>
 5ec:	08 95       	ret

000005ee <read_analog>:
}

uint16_t read_analog(uint8_t value)
{
	ADMUX &= 0xF0;                      //Clear the older channel that was read
 5ee:	ec e7       	ldi	r30, 0x7C	; 124
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	90 81       	ld	r25, Z
 5f4:	90 7f       	andi	r25, 0xF0	; 240
 5f6:	90 83       	st	Z, r25
	ADMUX |= value;                     //Defines the new analog channel to be read
 5f8:	90 81       	ld	r25, Z
 5fa:	89 2b       	or	r24, r25
 5fc:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);              //Starts a new calculation
 5fe:	ea e7       	ldi	r30, 0x7A	; 122
 600:	f0 e0       	ldi	r31, 0x00	; 0
 602:	80 81       	ld	r24, Z
 604:	80 64       	ori	r24, 0x40	; 64
 606:	80 83       	st	Z, r24
	while(ADCSRA & (1 << ADSC));        //Wait until the calculation is done
 608:	80 81       	ld	r24, Z
 60a:	86 fd       	sbrc	r24, 6
 60c:	fd cf       	rjmp	.-6      	; 0x608 <read_analog+0x1a>
	return ADCW;						//Returns the analog value of the selected channel
 60e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 612:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 616:	08 95       	ret

00000618 <__subsf3>:
 618:	50 58       	subi	r21, 0x80	; 128

0000061a <__addsf3>:
 61a:	bb 27       	eor	r27, r27
 61c:	aa 27       	eor	r26, r26
 61e:	0e 94 24 03 	call	0x648	; 0x648 <__addsf3x>
 622:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_round>
 626:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscA>
 62a:	38 f0       	brcs	.+14     	; 0x63a <__addsf3+0x20>
 62c:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_pscB>
 630:	20 f0       	brcs	.+8      	; 0x63a <__addsf3+0x20>
 632:	39 f4       	brne	.+14     	; 0x642 <__addsf3+0x28>
 634:	9f 3f       	cpi	r25, 0xFF	; 255
 636:	19 f4       	brne	.+6      	; 0x63e <__addsf3+0x24>
 638:	26 f4       	brtc	.+8      	; 0x642 <__addsf3+0x28>
 63a:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_nan>
 63e:	0e f4       	brtc	.+2      	; 0x642 <__addsf3+0x28>
 640:	e0 95       	com	r30
 642:	e7 fb       	bst	r30, 7
 644:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_inf>

00000648 <__addsf3x>:
 648:	e9 2f       	mov	r30, r25
 64a:	0e 94 14 04 	call	0x828	; 0x828 <__fp_split3>
 64e:	58 f3       	brcs	.-42     	; 0x626 <__addsf3+0xc>
 650:	ba 17       	cp	r27, r26
 652:	62 07       	cpc	r22, r18
 654:	73 07       	cpc	r23, r19
 656:	84 07       	cpc	r24, r20
 658:	95 07       	cpc	r25, r21
 65a:	20 f0       	brcs	.+8      	; 0x664 <__addsf3x+0x1c>
 65c:	79 f4       	brne	.+30     	; 0x67c <__addsf3x+0x34>
 65e:	a6 f5       	brtc	.+104    	; 0x6c8 <__addsf3x+0x80>
 660:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_zero>
 664:	0e f4       	brtc	.+2      	; 0x668 <__addsf3x+0x20>
 666:	e0 95       	com	r30
 668:	0b 2e       	mov	r0, r27
 66a:	ba 2f       	mov	r27, r26
 66c:	a0 2d       	mov	r26, r0
 66e:	0b 01       	movw	r0, r22
 670:	b9 01       	movw	r22, r18
 672:	90 01       	movw	r18, r0
 674:	0c 01       	movw	r0, r24
 676:	ca 01       	movw	r24, r20
 678:	a0 01       	movw	r20, r0
 67a:	11 24       	eor	r1, r1
 67c:	ff 27       	eor	r31, r31
 67e:	59 1b       	sub	r21, r25
 680:	99 f0       	breq	.+38     	; 0x6a8 <__addsf3x+0x60>
 682:	59 3f       	cpi	r21, 0xF9	; 249
 684:	50 f4       	brcc	.+20     	; 0x69a <__addsf3x+0x52>
 686:	50 3e       	cpi	r21, 0xE0	; 224
 688:	68 f1       	brcs	.+90     	; 0x6e4 <__addsf3x+0x9c>
 68a:	1a 16       	cp	r1, r26
 68c:	f0 40       	sbci	r31, 0x00	; 0
 68e:	a2 2f       	mov	r26, r18
 690:	23 2f       	mov	r18, r19
 692:	34 2f       	mov	r19, r20
 694:	44 27       	eor	r20, r20
 696:	58 5f       	subi	r21, 0xF8	; 248
 698:	f3 cf       	rjmp	.-26     	; 0x680 <__addsf3x+0x38>
 69a:	46 95       	lsr	r20
 69c:	37 95       	ror	r19
 69e:	27 95       	ror	r18
 6a0:	a7 95       	ror	r26
 6a2:	f0 40       	sbci	r31, 0x00	; 0
 6a4:	53 95       	inc	r21
 6a6:	c9 f7       	brne	.-14     	; 0x69a <__addsf3x+0x52>
 6a8:	7e f4       	brtc	.+30     	; 0x6c8 <__addsf3x+0x80>
 6aa:	1f 16       	cp	r1, r31
 6ac:	ba 0b       	sbc	r27, r26
 6ae:	62 0b       	sbc	r22, r18
 6b0:	73 0b       	sbc	r23, r19
 6b2:	84 0b       	sbc	r24, r20
 6b4:	ba f0       	brmi	.+46     	; 0x6e4 <__addsf3x+0x9c>
 6b6:	91 50       	subi	r25, 0x01	; 1
 6b8:	a1 f0       	breq	.+40     	; 0x6e2 <__addsf3x+0x9a>
 6ba:	ff 0f       	add	r31, r31
 6bc:	bb 1f       	adc	r27, r27
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	c2 f7       	brpl	.-16     	; 0x6b6 <__addsf3x+0x6e>
 6c6:	0e c0       	rjmp	.+28     	; 0x6e4 <__addsf3x+0x9c>
 6c8:	ba 0f       	add	r27, r26
 6ca:	62 1f       	adc	r22, r18
 6cc:	73 1f       	adc	r23, r19
 6ce:	84 1f       	adc	r24, r20
 6d0:	48 f4       	brcc	.+18     	; 0x6e4 <__addsf3x+0x9c>
 6d2:	87 95       	ror	r24
 6d4:	77 95       	ror	r23
 6d6:	67 95       	ror	r22
 6d8:	b7 95       	ror	r27
 6da:	f7 95       	ror	r31
 6dc:	9e 3f       	cpi	r25, 0xFE	; 254
 6de:	08 f0       	brcs	.+2      	; 0x6e2 <__addsf3x+0x9a>
 6e0:	b0 cf       	rjmp	.-160    	; 0x642 <__addsf3+0x28>
 6e2:	93 95       	inc	r25
 6e4:	88 0f       	add	r24, r24
 6e6:	08 f0       	brcs	.+2      	; 0x6ea <__addsf3x+0xa2>
 6e8:	99 27       	eor	r25, r25
 6ea:	ee 0f       	add	r30, r30
 6ec:	97 95       	ror	r25
 6ee:	87 95       	ror	r24
 6f0:	08 95       	ret

000006f2 <__fixsfsi>:
 6f2:	0e 94 80 03 	call	0x700	; 0x700 <__fixunssfsi>
 6f6:	68 94       	set
 6f8:	b1 11       	cpse	r27, r1
 6fa:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_szero>
 6fe:	08 95       	ret

00000700 <__fixunssfsi>:
 700:	0e 94 1c 04 	call	0x838	; 0x838 <__fp_splitA>
 704:	88 f0       	brcs	.+34     	; 0x728 <__fixunssfsi+0x28>
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	98 f0       	brcs	.+38     	; 0x730 <__fixunssfsi+0x30>
 70a:	b9 2f       	mov	r27, r25
 70c:	99 27       	eor	r25, r25
 70e:	b7 51       	subi	r27, 0x17	; 23
 710:	b0 f0       	brcs	.+44     	; 0x73e <__fixunssfsi+0x3e>
 712:	e1 f0       	breq	.+56     	; 0x74c <__fixunssfsi+0x4c>
 714:	66 0f       	add	r22, r22
 716:	77 1f       	adc	r23, r23
 718:	88 1f       	adc	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	1a f0       	brmi	.+6      	; 0x724 <__fixunssfsi+0x24>
 71e:	ba 95       	dec	r27
 720:	c9 f7       	brne	.-14     	; 0x714 <__fixunssfsi+0x14>
 722:	14 c0       	rjmp	.+40     	; 0x74c <__fixunssfsi+0x4c>
 724:	b1 30       	cpi	r27, 0x01	; 1
 726:	91 f0       	breq	.+36     	; 0x74c <__fixunssfsi+0x4c>
 728:	0e 94 36 04 	call	0x86c	; 0x86c <__fp_zero>
 72c:	b1 e0       	ldi	r27, 0x01	; 1
 72e:	08 95       	ret
 730:	0c 94 36 04 	jmp	0x86c	; 0x86c <__fp_zero>
 734:	67 2f       	mov	r22, r23
 736:	78 2f       	mov	r23, r24
 738:	88 27       	eor	r24, r24
 73a:	b8 5f       	subi	r27, 0xF8	; 248
 73c:	39 f0       	breq	.+14     	; 0x74c <__fixunssfsi+0x4c>
 73e:	b9 3f       	cpi	r27, 0xF9	; 249
 740:	cc f3       	brlt	.-14     	; 0x734 <__fixunssfsi+0x34>
 742:	86 95       	lsr	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	b3 95       	inc	r27
 74a:	d9 f7       	brne	.-10     	; 0x742 <__fixunssfsi+0x42>
 74c:	3e f4       	brtc	.+14     	; 0x75c <__fixunssfsi+0x5c>
 74e:	90 95       	com	r25
 750:	80 95       	com	r24
 752:	70 95       	com	r23
 754:	61 95       	neg	r22
 756:	7f 4f       	sbci	r23, 0xFF	; 255
 758:	8f 4f       	sbci	r24, 0xFF	; 255
 75a:	9f 4f       	sbci	r25, 0xFF	; 255
 75c:	08 95       	ret

0000075e <__floatunsisf>:
 75e:	e8 94       	clt
 760:	09 c0       	rjmp	.+18     	; 0x774 <__floatsisf+0x12>

00000762 <__floatsisf>:
 762:	97 fb       	bst	r25, 7
 764:	3e f4       	brtc	.+14     	; 0x774 <__floatsisf+0x12>
 766:	90 95       	com	r25
 768:	80 95       	com	r24
 76a:	70 95       	com	r23
 76c:	61 95       	neg	r22
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	8f 4f       	sbci	r24, 0xFF	; 255
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	99 23       	and	r25, r25
 776:	a9 f0       	breq	.+42     	; 0x7a2 <__floatsisf+0x40>
 778:	f9 2f       	mov	r31, r25
 77a:	96 e9       	ldi	r25, 0x96	; 150
 77c:	bb 27       	eor	r27, r27
 77e:	93 95       	inc	r25
 780:	f6 95       	lsr	r31
 782:	87 95       	ror	r24
 784:	77 95       	ror	r23
 786:	67 95       	ror	r22
 788:	b7 95       	ror	r27
 78a:	f1 11       	cpse	r31, r1
 78c:	f8 cf       	rjmp	.-16     	; 0x77e <__floatsisf+0x1c>
 78e:	fa f4       	brpl	.+62     	; 0x7ce <__floatsisf+0x6c>
 790:	bb 0f       	add	r27, r27
 792:	11 f4       	brne	.+4      	; 0x798 <__floatsisf+0x36>
 794:	60 ff       	sbrs	r22, 0
 796:	1b c0       	rjmp	.+54     	; 0x7ce <__floatsisf+0x6c>
 798:	6f 5f       	subi	r22, 0xFF	; 255
 79a:	7f 4f       	sbci	r23, 0xFF	; 255
 79c:	8f 4f       	sbci	r24, 0xFF	; 255
 79e:	9f 4f       	sbci	r25, 0xFF	; 255
 7a0:	16 c0       	rjmp	.+44     	; 0x7ce <__floatsisf+0x6c>
 7a2:	88 23       	and	r24, r24
 7a4:	11 f0       	breq	.+4      	; 0x7aa <__floatsisf+0x48>
 7a6:	96 e9       	ldi	r25, 0x96	; 150
 7a8:	11 c0       	rjmp	.+34     	; 0x7cc <__floatsisf+0x6a>
 7aa:	77 23       	and	r23, r23
 7ac:	21 f0       	breq	.+8      	; 0x7b6 <__floatsisf+0x54>
 7ae:	9e e8       	ldi	r25, 0x8E	; 142
 7b0:	87 2f       	mov	r24, r23
 7b2:	76 2f       	mov	r23, r22
 7b4:	05 c0       	rjmp	.+10     	; 0x7c0 <__floatsisf+0x5e>
 7b6:	66 23       	and	r22, r22
 7b8:	71 f0       	breq	.+28     	; 0x7d6 <__floatsisf+0x74>
 7ba:	96 e8       	ldi	r25, 0x86	; 134
 7bc:	86 2f       	mov	r24, r22
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	2a f0       	brmi	.+10     	; 0x7ce <__floatsisf+0x6c>
 7c4:	9a 95       	dec	r25
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	da f7       	brpl	.-10     	; 0x7c4 <__floatsisf+0x62>
 7ce:	88 0f       	add	r24, r24
 7d0:	96 95       	lsr	r25
 7d2:	87 95       	ror	r24
 7d4:	97 f9       	bld	r25, 7
 7d6:	08 95       	ret

000007d8 <__fp_inf>:
 7d8:	97 f9       	bld	r25, 7
 7da:	9f 67       	ori	r25, 0x7F	; 127
 7dc:	80 e8       	ldi	r24, 0x80	; 128
 7de:	70 e0       	ldi	r23, 0x00	; 0
 7e0:	60 e0       	ldi	r22, 0x00	; 0
 7e2:	08 95       	ret

000007e4 <__fp_nan>:
 7e4:	9f ef       	ldi	r25, 0xFF	; 255
 7e6:	80 ec       	ldi	r24, 0xC0	; 192
 7e8:	08 95       	ret

000007ea <__fp_pscA>:
 7ea:	00 24       	eor	r0, r0
 7ec:	0a 94       	dec	r0
 7ee:	16 16       	cp	r1, r22
 7f0:	17 06       	cpc	r1, r23
 7f2:	18 06       	cpc	r1, r24
 7f4:	09 06       	cpc	r0, r25
 7f6:	08 95       	ret

000007f8 <__fp_pscB>:
 7f8:	00 24       	eor	r0, r0
 7fa:	0a 94       	dec	r0
 7fc:	12 16       	cp	r1, r18
 7fe:	13 06       	cpc	r1, r19
 800:	14 06       	cpc	r1, r20
 802:	05 06       	cpc	r0, r21
 804:	08 95       	ret

00000806 <__fp_round>:
 806:	09 2e       	mov	r0, r25
 808:	03 94       	inc	r0
 80a:	00 0c       	add	r0, r0
 80c:	11 f4       	brne	.+4      	; 0x812 <__fp_round+0xc>
 80e:	88 23       	and	r24, r24
 810:	52 f0       	brmi	.+20     	; 0x826 <__fp_round+0x20>
 812:	bb 0f       	add	r27, r27
 814:	40 f4       	brcc	.+16     	; 0x826 <__fp_round+0x20>
 816:	bf 2b       	or	r27, r31
 818:	11 f4       	brne	.+4      	; 0x81e <__fp_round+0x18>
 81a:	60 ff       	sbrs	r22, 0
 81c:	04 c0       	rjmp	.+8      	; 0x826 <__fp_round+0x20>
 81e:	6f 5f       	subi	r22, 0xFF	; 255
 820:	7f 4f       	sbci	r23, 0xFF	; 255
 822:	8f 4f       	sbci	r24, 0xFF	; 255
 824:	9f 4f       	sbci	r25, 0xFF	; 255
 826:	08 95       	ret

00000828 <__fp_split3>:
 828:	57 fd       	sbrc	r21, 7
 82a:	90 58       	subi	r25, 0x80	; 128
 82c:	44 0f       	add	r20, r20
 82e:	55 1f       	adc	r21, r21
 830:	59 f0       	breq	.+22     	; 0x848 <__fp_splitA+0x10>
 832:	5f 3f       	cpi	r21, 0xFF	; 255
 834:	71 f0       	breq	.+28     	; 0x852 <__fp_splitA+0x1a>
 836:	47 95       	ror	r20

00000838 <__fp_splitA>:
 838:	88 0f       	add	r24, r24
 83a:	97 fb       	bst	r25, 7
 83c:	99 1f       	adc	r25, r25
 83e:	61 f0       	breq	.+24     	; 0x858 <__fp_splitA+0x20>
 840:	9f 3f       	cpi	r25, 0xFF	; 255
 842:	79 f0       	breq	.+30     	; 0x862 <__fp_splitA+0x2a>
 844:	87 95       	ror	r24
 846:	08 95       	ret
 848:	12 16       	cp	r1, r18
 84a:	13 06       	cpc	r1, r19
 84c:	14 06       	cpc	r1, r20
 84e:	55 1f       	adc	r21, r21
 850:	f2 cf       	rjmp	.-28     	; 0x836 <__fp_split3+0xe>
 852:	46 95       	lsr	r20
 854:	f1 df       	rcall	.-30     	; 0x838 <__fp_splitA>
 856:	08 c0       	rjmp	.+16     	; 0x868 <__fp_splitA+0x30>
 858:	16 16       	cp	r1, r22
 85a:	17 06       	cpc	r1, r23
 85c:	18 06       	cpc	r1, r24
 85e:	99 1f       	adc	r25, r25
 860:	f1 cf       	rjmp	.-30     	; 0x844 <__fp_splitA+0xc>
 862:	86 95       	lsr	r24
 864:	71 05       	cpc	r23, r1
 866:	61 05       	cpc	r22, r1
 868:	08 94       	sec
 86a:	08 95       	ret

0000086c <__fp_zero>:
 86c:	e8 94       	clt

0000086e <__fp_szero>:
 86e:	bb 27       	eor	r27, r27
 870:	66 27       	eor	r22, r22
 872:	77 27       	eor	r23, r23
 874:	cb 01       	movw	r24, r22
 876:	97 f9       	bld	r25, 7
 878:	08 95       	ret

0000087a <__mulsf3>:
 87a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <__mulsf3x>
 87e:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_round>
 882:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fp_pscA>
 886:	38 f0       	brcs	.+14     	; 0x896 <__mulsf3+0x1c>
 888:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__fp_pscB>
 88c:	20 f0       	brcs	.+8      	; 0x896 <__mulsf3+0x1c>
 88e:	95 23       	and	r25, r21
 890:	11 f0       	breq	.+4      	; 0x896 <__mulsf3+0x1c>
 892:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_inf>
 896:	0c 94 f2 03 	jmp	0x7e4	; 0x7e4 <__fp_nan>
 89a:	11 24       	eor	r1, r1
 89c:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_szero>

000008a0 <__mulsf3x>:
 8a0:	0e 94 14 04 	call	0x828	; 0x828 <__fp_split3>
 8a4:	70 f3       	brcs	.-36     	; 0x882 <__mulsf3+0x8>

000008a6 <__mulsf3_pse>:
 8a6:	95 9f       	mul	r25, r21
 8a8:	c1 f3       	breq	.-16     	; 0x89a <__mulsf3+0x20>
 8aa:	95 0f       	add	r25, r21
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	55 1f       	adc	r21, r21
 8b0:	62 9f       	mul	r22, r18
 8b2:	f0 01       	movw	r30, r0
 8b4:	72 9f       	mul	r23, r18
 8b6:	bb 27       	eor	r27, r27
 8b8:	f0 0d       	add	r31, r0
 8ba:	b1 1d       	adc	r27, r1
 8bc:	63 9f       	mul	r22, r19
 8be:	aa 27       	eor	r26, r26
 8c0:	f0 0d       	add	r31, r0
 8c2:	b1 1d       	adc	r27, r1
 8c4:	aa 1f       	adc	r26, r26
 8c6:	64 9f       	mul	r22, r20
 8c8:	66 27       	eor	r22, r22
 8ca:	b0 0d       	add	r27, r0
 8cc:	a1 1d       	adc	r26, r1
 8ce:	66 1f       	adc	r22, r22
 8d0:	82 9f       	mul	r24, r18
 8d2:	22 27       	eor	r18, r18
 8d4:	b0 0d       	add	r27, r0
 8d6:	a1 1d       	adc	r26, r1
 8d8:	62 1f       	adc	r22, r18
 8da:	73 9f       	mul	r23, r19
 8dc:	b0 0d       	add	r27, r0
 8de:	a1 1d       	adc	r26, r1
 8e0:	62 1f       	adc	r22, r18
 8e2:	83 9f       	mul	r24, r19
 8e4:	a0 0d       	add	r26, r0
 8e6:	61 1d       	adc	r22, r1
 8e8:	22 1f       	adc	r18, r18
 8ea:	74 9f       	mul	r23, r20
 8ec:	33 27       	eor	r19, r19
 8ee:	a0 0d       	add	r26, r0
 8f0:	61 1d       	adc	r22, r1
 8f2:	23 1f       	adc	r18, r19
 8f4:	84 9f       	mul	r24, r20
 8f6:	60 0d       	add	r22, r0
 8f8:	21 1d       	adc	r18, r1
 8fa:	82 2f       	mov	r24, r18
 8fc:	76 2f       	mov	r23, r22
 8fe:	6a 2f       	mov	r22, r26
 900:	11 24       	eor	r1, r1
 902:	9f 57       	subi	r25, 0x7F	; 127
 904:	50 40       	sbci	r21, 0x00	; 0
 906:	9a f0       	brmi	.+38     	; 0x92e <__stack+0x2f>
 908:	f1 f0       	breq	.+60     	; 0x946 <__stack+0x47>
 90a:	88 23       	and	r24, r24
 90c:	4a f0       	brmi	.+18     	; 0x920 <__stack+0x21>
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	bb 1f       	adc	r27, r27
 914:	66 1f       	adc	r22, r22
 916:	77 1f       	adc	r23, r23
 918:	88 1f       	adc	r24, r24
 91a:	91 50       	subi	r25, 0x01	; 1
 91c:	50 40       	sbci	r21, 0x00	; 0
 91e:	a9 f7       	brne	.-22     	; 0x90a <__stack+0xb>
 920:	9e 3f       	cpi	r25, 0xFE	; 254
 922:	51 05       	cpc	r21, r1
 924:	80 f0       	brcs	.+32     	; 0x946 <__stack+0x47>
 926:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_inf>
 92a:	0c 94 37 04 	jmp	0x86e	; 0x86e <__fp_szero>
 92e:	5f 3f       	cpi	r21, 0xFF	; 255
 930:	e4 f3       	brlt	.-8      	; 0x92a <__stack+0x2b>
 932:	98 3e       	cpi	r25, 0xE8	; 232
 934:	d4 f3       	brlt	.-12     	; 0x92a <__stack+0x2b>
 936:	86 95       	lsr	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b7 95       	ror	r27
 93e:	f7 95       	ror	r31
 940:	e7 95       	ror	r30
 942:	9f 5f       	subi	r25, 0xFF	; 255
 944:	c1 f7       	brne	.-16     	; 0x936 <__stack+0x37>
 946:	fe 2b       	or	r31, r30
 948:	88 0f       	add	r24, r24
 94a:	91 1d       	adc	r25, r1
 94c:	96 95       	lsr	r25
 94e:	87 95       	ror	r24
 950:	97 f9       	bld	r25, 7
 952:	08 95       	ret

00000954 <atoi>:
 954:	fc 01       	movw	r30, r24
 956:	88 27       	eor	r24, r24
 958:	99 27       	eor	r25, r25
 95a:	e8 94       	clt
 95c:	21 91       	ld	r18, Z+
 95e:	20 32       	cpi	r18, 0x20	; 32
 960:	e9 f3       	breq	.-6      	; 0x95c <atoi+0x8>
 962:	29 30       	cpi	r18, 0x09	; 9
 964:	10 f0       	brcs	.+4      	; 0x96a <atoi+0x16>
 966:	2e 30       	cpi	r18, 0x0E	; 14
 968:	c8 f3       	brcs	.-14     	; 0x95c <atoi+0x8>
 96a:	2b 32       	cpi	r18, 0x2B	; 43
 96c:	41 f0       	breq	.+16     	; 0x97e <atoi+0x2a>
 96e:	2d 32       	cpi	r18, 0x2D	; 45
 970:	39 f4       	brne	.+14     	; 0x980 <atoi+0x2c>
 972:	68 94       	set
 974:	04 c0       	rjmp	.+8      	; 0x97e <atoi+0x2a>
 976:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <__mulhi_const_10>
 97a:	82 0f       	add	r24, r18
 97c:	91 1d       	adc	r25, r1
 97e:	21 91       	ld	r18, Z+
 980:	20 53       	subi	r18, 0x30	; 48
 982:	2a 30       	cpi	r18, 0x0A	; 10
 984:	c0 f3       	brcs	.-16     	; 0x976 <atoi+0x22>
 986:	1e f4       	brtc	.+6      	; 0x98e <atoi+0x3a>
 988:	90 95       	com	r25
 98a:	81 95       	neg	r24
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	08 95       	ret

00000990 <__itoa_ncheck>:
 990:	bb 27       	eor	r27, r27
 992:	4a 30       	cpi	r20, 0x0A	; 10
 994:	31 f4       	brne	.+12     	; 0x9a2 <__itoa_ncheck+0x12>
 996:	99 23       	and	r25, r25
 998:	22 f4       	brpl	.+8      	; 0x9a2 <__itoa_ncheck+0x12>
 99a:	bd e2       	ldi	r27, 0x2D	; 45
 99c:	90 95       	com	r25
 99e:	81 95       	neg	r24
 9a0:	9f 4f       	sbci	r25, 0xFF	; 255
 9a2:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__utoa_common>

000009a6 <__mulhi_const_10>:
 9a6:	7a e0       	ldi	r23, 0x0A	; 10
 9a8:	97 9f       	mul	r25, r23
 9aa:	90 2d       	mov	r25, r0
 9ac:	87 9f       	mul	r24, r23
 9ae:	80 2d       	mov	r24, r0
 9b0:	91 0d       	add	r25, r1
 9b2:	11 24       	eor	r1, r1
 9b4:	08 95       	ret

000009b6 <__utoa_ncheck>:
 9b6:	bb 27       	eor	r27, r27

000009b8 <__utoa_common>:
 9b8:	fb 01       	movw	r30, r22
 9ba:	55 27       	eor	r21, r21
 9bc:	aa 27       	eor	r26, r26
 9be:	88 0f       	add	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	aa 1f       	adc	r26, r26
 9c4:	a4 17       	cp	r26, r20
 9c6:	10 f0       	brcs	.+4      	; 0x9cc <__utoa_common+0x14>
 9c8:	a4 1b       	sub	r26, r20
 9ca:	83 95       	inc	r24
 9cc:	50 51       	subi	r21, 0x10	; 16
 9ce:	b9 f7       	brne	.-18     	; 0x9be <__utoa_common+0x6>
 9d0:	a0 5d       	subi	r26, 0xD0	; 208
 9d2:	aa 33       	cpi	r26, 0x3A	; 58
 9d4:	08 f0       	brcs	.+2      	; 0x9d8 <__utoa_common+0x20>
 9d6:	a9 5d       	subi	r26, 0xD9	; 217
 9d8:	a1 93       	st	Z+, r26
 9da:	00 97       	sbiw	r24, 0x00	; 0
 9dc:	79 f7       	brne	.-34     	; 0x9bc <__utoa_common+0x4>
 9de:	b1 11       	cpse	r27, r1
 9e0:	b1 93       	st	Z+, r27
 9e2:	11 92       	st	Z+, r1
 9e4:	cb 01       	movw	r24, r22
 9e6:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <strrev>

000009ea <strrev>:
 9ea:	dc 01       	movw	r26, r24
 9ec:	fc 01       	movw	r30, r24
 9ee:	67 2f       	mov	r22, r23
 9f0:	71 91       	ld	r23, Z+
 9f2:	77 23       	and	r23, r23
 9f4:	e1 f7       	brne	.-8      	; 0x9ee <strrev+0x4>
 9f6:	32 97       	sbiw	r30, 0x02	; 2
 9f8:	04 c0       	rjmp	.+8      	; 0xa02 <strrev+0x18>
 9fa:	7c 91       	ld	r23, X
 9fc:	6d 93       	st	X+, r22
 9fe:	70 83       	st	Z, r23
 a00:	62 91       	ld	r22, -Z
 a02:	ae 17       	cp	r26, r30
 a04:	bf 07       	cpc	r27, r31
 a06:	c8 f3       	brcs	.-14     	; 0x9fa <strrev+0x10>
 a08:	08 95       	ret

00000a0a <_exit>:
 a0a:	f8 94       	cli

00000a0c <__stop_program>:
 a0c:	ff cf       	rjmp	.-2      	; 0xa0c <__stop_program>
